{"version":3,"file":"index.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Button/Button.jsx","../src/components/CustomInput/Input.jsx","../src/components/FloatingInput/FloatingInput.jsx","../node_modules/react-hook-form/dist/index.esm.mjs","../src/modules/login/constants.js","../src/modules/login/components/ActivationFooter.jsx","../src/modules/login/components/ActivationHeader.jsx","../src/modules/login/Login.jsx","../src/utils/string/index.js"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","\nimport React, { forwardRef} from 'react';\n// import { DotSpinner } from '../DotSpinner';\nimport styles from './Button.module.css';\n\n// interface ButtonProps extends React.HTMLAttributes<HTMLDivElement> {\n// \tclassName?: string;\n// \tlabel?: ReactNode;\n// \tappearance?: 'primary' | 'secondary';\n// \tsize?: 'small' | 'large';\n// \ttag?: ElementType;\n// \ttype?: 'submit' | 'button' | 'reset';\n// \tdisabled?: boolean;\n// \tloading?: boolean;\n// \tvisible?: boolean;\n// \toutbound?: boolean;\n// \tonClick?: () => void;\n// \tchildren?: ReactNode;\n// }\n\nexport const Button = forwardRef(\n\t(props, ref) => {\n\t\tconst {\n\t\t\tclassName,\n\t\t\tlabel,\n\t\t\ttag: Tag = 'button',\n\t\t\tloading = false,\n\t\t\tsize = 'large',\n\t\t\tappearance = 'primary',\n\t\t\tonClick,\n\t\t\toutbound,\n\t\t\tvisible,\n\t\t\tchildren,\n\t\t\t...attributes\n\t\t} = props;\n\n\t\tconst buttonClasses = [\n\t\t\tstyles.button,\n\t\t\tstyles[appearance],\n\t\t\tstyles[size],\n\t\t\tclassName,\n\t\t].join(' ');\n\n\t\treturn (\n\t\t\t<Tag\n\t\t\t\tref={ref}\n\t\t\t\tclassName={buttonClasses}\n\t\t\t\t{...attributes}\n\t\t\t\tonClick={onClick}>\n\t\t\t\t{!loading && children}\n\t\t\t\t{!loading && label}\n\t\t\t\t{/* {loading && <DotSpinner />} */}\n\t\t\t</Tag>\n\t\t);\n\t}\n);\n\nButton.displayName = 'Button';\n","import React, { ChangeEvent, useState } from 'react';\n// import IconButton from '@mui/material/IconButton';\n// import { Clear } from '@styled-icons/material-outlined';\n// import InputAdornment from '@mui/material/InputAdornment';\nimport './input.css'; // Import the CSS file\n// import VisibilityOffOutlinedIcon from '../../icons/icons-js-format/VisibilityOffOutlinedIcon';\n// import VisibilityOutlinedIcon from '../../icons/icons-js-format/VisibilityOutlinedIcon';\n\nexport const CustomInput = React.forwardRef(\n\t(props, ref) => {\n\t\tconst {\n\t\t\ttype = 'text',\n\t\t\tplaceholder = '',\n\t\t\ttext = '',\n\t\t\tclassName = '',\n\t\t\terrors = false,\n\t\t\terrorMsg = '',\n\t\t\tlabel = '',\n\t\t\tregister,\n\t\t\tfilled = '',\n\t\t\tisRequired = false,\n\t\t\teditable = false,\n\t\t\tleftIcon,\n\t\t\trightIcon,\n\t\t\tisClearable = false,\n\t\t\tvariant = '',\n\t\t\tmaxedWidth,\n\t\t\tendAdornment,\n\t\t\t...attributes\n\t\t} = props;\n\n\t\tconst [showPassword, setShowPassword] = useState(false);\n\n\t\tconst handleClickShowPassword = () => setShowPassword((show) => !show);\n\n\t\tconst handleMouseDownPassword = (event) => {\n\t\t\tevent.preventDefault();\n\t\t};\n\n\t\tconst handleOnChange = (event) => {\n\t\t\tconst { onChange } = props;\n\t\t\tif (onChange) {\n\t\t\t\tonChange(event);\n\t\t\t}\n\t\t};\n\n\t\tconst clearValue = () => {\n\t\t\tconst { onChange } = props;\n\t\t\tif (onChange) {\n\t\t\t\tonChange({ target: { value: '' } });\n\t\t\t}\n\t\t};\n\n\t\tconst dataTestId = attributes['data-testid'];\n\t\tdelete attributes['data-testid'];\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName='input-group-wrapper' styles={{width: maxedWidth? '100%': ''}}>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`custom-input-container ${\n\t\t\t\t\t\terrors ? 'errors' : ''\n\t\t\t\t\t} ${editable ? 'editable' : ''}`}\n\t\t\t\t\t{...attributes}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\tdata-testid={dataTestId}\n\t\t\t\t\t\tclassName={`StyledInput ${editable ? 'editable' : ''} ${\n\t\t\t\t\t\t\terrors ? 'errors' : ''\n\t\t\t\t\t\t} ${className}`}\n\t\t\t\t\t\ttype={type === 'password' && showPassword ? 'text' : type}\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t{...attributes}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\tonChange={handleOnChange}\n\t\t\t\t\t\trequired={isRequired}\n\t\t\t\t\t\taria-label={label}\n\t\t\t\t\t\tid={`text-field-${label}`}\n\t\t\t\t\t/>\n\t\t\t\t\t{!editable && (\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\tclassName={`styled-label ${leftIcon ? 'leftIcon' : ''}`}\n\t\t\t\t\t\t\thtmlFor={`text-field-${label}`}>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"styled-error-container\">\n\t\t\t\t\t{isRequired && (\n\t\t\t\t\t\t<span className=\"required-text\" role=\"alert\">\n\t\t\t\t\t\t\t* Required\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t\t{errorMsg && (\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName=\"error-text\"\n\t\t\t\t\t\t\trole=\"alert\">\n\t\t\t\t\t\t\t{errorMsg.toString()}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n);\n\nexport default CustomInput;\n","import React, { useEffect, useState } from \"react\";\nimport { CustomInput } from \"../CustomInput\";\nimport \"./floatingInput.module.css\";\n\nconst FloatingInput = ({\n  errors = false,\n  label = \"\",\n  onChange = (event) => event,\n  register,\n  isRequired = false,\n  leftIcon,\n  rightIcon,\n  isClearable = false,\n  variant = \"\",\n  value = \"\",\n  width,\n  ...restProps\n}) => {\n  const [val, setVal] = useState(value);\n\n  const handleChange = (event) => {\n    setVal(event.target.value);\n    onChange(event);\n  };\n\n  useEffect(() => {\n    setVal(value);\n  }, [value]);\n\n  return (\n    // <div class=\"input-group\">\n\t// \t\t\t\t<input\n\t// \t\t\t\t\tautoComplete=\"off\"\n\t// \t\t\t\t\t// className={`StyledInput ${editable ? 'editable' : ''} ${\n\t// \t\t\t\t\t// \terrors ? 'errors' : ''\n\t// \t\t\t\t\t// } ${className}`}\n\t// \t\t\t\t\t// type={type === 'password' && showPassword ? 'text' : type}\n\t// \t\t\t\t\ttype={type ?? 'text'}\n\t// \t\t\t\t\tplaceholder={placeholder}\n\t// \t\t\t\t\t{...restProps}\n\t// \t\t\t\t\tref={ref}\n\t// \t\t\t\t\tonChange={handleOnChange}\n\t// \t\t\t\t\trequired={isRequired}\n\t// \t\t\t\t\taria-label={label}\n\t// \t\t\t\t\tid={`text-field-${label}`}\n\t// \t\t\t\t/>\n\t// \t\t\t\t{!editable && (\n\t// \t\t\t\t\t<label\n\t// \t\t\t\t\t\t// className={`styled-label ${leftIcon ? 'leftIcon' : ''}`}\n\t// \t\t\t\t\t\thtmlFor={`text-field-${label}`}>\n\t// \t\t\t\t\t\t{label}\n\t// \t\t\t\t\t</label>\n\t// \t\t\t\t)}\n    //   {/* <input type=\"text\" required />\n    //   <span class=\"highlight\"></span>\n    //   <span class=\"bar\"></span>\n    //   <label>Username</label> */}\n    // </div>\n    <div className='floating-input-container' style={{ width }}>\n    \t<CustomInput\n    \t\tleftIcon={leftIcon}\n    \t\trightIcon={rightIcon}\n    \t\tisClearable={isClearable}\n    \t\terrors={errors}\n    \t\tisRequired={isRequired}\n    \t\tfilled={!!val}\n    \t\tvariant={variant}\n    \t\tregister={register}\n    \t\tonChange={handleChange}\n    \t\tlabel={label}\n    \t\tvalue={val}\n    \t\ttext={val}\n    \t\t{...restProps}\n    \t/>\n </div>\n  );\n};\n\nexport default FloatingInput;\n","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || formState.disabled\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            isValidating: {\n                enumerable: true,\n                get: () => !!get(formState.validatingFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    break;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    break;\n                }\n                else {\n                    iterateFieldsByAction(currentField, action);\n                }\n            }\n            else if (isObject(currentField)) {\n                iterateFieldsByAction(currentField, action);\n            }\n        }\n    }\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        const disabledField = !!(get(_fields, name) &&\n            get(_fields, name)._f &&\n            get(_fields, name)._f.disabled);\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n            isCurrentFieldPristine || disabledField\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    _updateIsValidating([name], true);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    _updateIsValidating([name]);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    fieldValue === get(_formValues, name, fieldValue);\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if ((isBoolean(disabled) && _state.mount) || !!disabled) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n                value: options.value,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","export const USER_LOGIN_FORM = {\n\tREQUIRED_USER_NAME: 'Please enter your email/username',\n\tREQUIRED_PASSWORD: 'Please enter your password',\n\tTITLE: 'Welcome',\n\tMESSAGE: 'Please sign in to access your account',\n\tINVALID_USER:\n\t\t'We couldn’t find an account with the credentials you entered. Please try again or click Forgot Password to reset your password.',\n\tERROR_MESSAGE: 'An error occurred during sign-in. Please try again later.',\n};","import React from 'react';\nimport './activationCmp.css';\n\nconst ActivationFooter = ({ privacyPolicyLink, termsOfUseLink }) => (\n  <div className=\"footer\">\n    <div className=\"link-container\">\n      <a className=\"styled-link\" href={privacyPolicyLink || 'privacy-policy-details'}>\n        Privacy Policy\n      </a>\n    </div>\n    <div className=\"link-container\">\n      <a className=\"styled-link\" target=\"_blank\" href={termsOfUseLink || 'terms-and-conditions-details'}>\n        Terms of Use\n      </a>\n    </div>\n  </div>\n);\n\nexport default ActivationFooter;\n","import React from 'react';\nimport './activationCmp.css';\n\nconst ActivationHeader = ({ title, subtitle, siteLogo }) => (\n  <div className=\"header\">\n    <div className=\"image-wrapper\">\n      <div className=\"picture\">\n        {/* <Fcfdlogo width=\"253\" height=\"50\" /> */}\n       {siteLogo}\n      </div>\n    </div>\n    <div className=\"head\">\n      <div className=\"title\">{title}</div>\n      {subtitle && (\n        <div className=\"subtitle\" dangerouslySetInnerHTML={{ __html: subtitle }} />\n      )}\n    </div>\n  </div>\n);\n\nexport default ActivationHeader;\n","import React, { useEffect, useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport FloatingInput from \"../../components/FloatingInput/FloatingInput\";\nimport {Button} from '../../components/Button'\n// import Link from 'next/link';\n\n// import ActivationHeader from \"./component/ActivationHeader\";\nimport { USER_LOGIN_FORM } from \"./constants\";\nimport { ActivationFooter, ActivationHeader } from \"./components\";\n// import {}\n// \tuserSignIn,\n// \tredirectToMarketplace,\n// } from '../../../global/services/userService';\nimport \"./login.css\";\n\n/**\n * Represents login Form.\n */\nconst LoginScreen = ({ siteLogo }) => {\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    getValues,\n    watch,\n    setError,\n  } = useForm({\n    mode: \"onSubmit\",\n  });\n\n  const [loading, setLoading] = useState(false);\n\n  watch();\n\n  const mapValues = () => {\n    const values = getValues();\n\n    return {\n      username: values?.username,\n      password: values?.password,\n      idpType: \"COGNITO\",\n      application: \"marketplace\",\n    };\n  };\n\n  const onSubmit = async () => {\n    setLoading(true);\n    // try {\n    // \tconst { authGrantCode, response } = await userSignIn(mapValues());\n\n    // \tif (authGrantCode) {\n    // \t\tredirectToMarketplace(authGrantCode);\n    // \t} else if (response.status === 401) {\n    // \t\tsetError('password', {\n    // \t\t\tmessage: USER_LOGIN_FORM.INVALID_USER,\n    // \t\t});\n    // \t} else {\n    // \t\tsetError('password', {\n    // \t\t\tmessage: USER_LOGIN_FORM.ERROR_MESSAGE,\n    // \t\t});\n    // \t}\n    // \tsetLoading(false);\n    // } catch (e) {\n    // \tsetError('password', {\n    // \t\tmessage: USER_LOGIN_FORM.ERROR_MESSAGE,\n    // \t});\n    // \tsetLoading(false);\n    // }\n  };\n\n  /**\n   * Returns true if all required fields are entered else returns false.\n   */\n  const hasRequiredFields = () => {\n    const { username, password } = getValues();\n\n    return !!username && !!password;\n  };\n\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      if (event.key === \"Enter\") {\n        handleSubmit(onSubmit)();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyPress);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, []);\n\n  return (\n    <div className=\"card\">\n      <ActivationHeader\n        title={USER_LOGIN_FORM.TITLE}\n        subtitle={USER_LOGIN_FORM.MESSAGE}\n        siteLogo={siteLogo}\n      />\n\n      <form noValidate>\n        <div className=\"element-wrapper\">\n          <Controller\n            name=\"username\"\n            rules={{\n              required: {\n                value: true,\n                message: USER_LOGIN_FORM.REQUIRED_USER_NAME,\n              },\n            }}\n            control={control}\n            render={({ field }) => {\n              return (\n                <FloatingInput\n                  aria-invalid={errors?.username ? \"true\" : \"false\"}\n                  errors={errors.username}\n                  type=\"text\"\n                  errorMsg={errors.username?.message}\n                  label=\"Username\"\n                  variant=\"vehicleDetails\"\n                  {...field}\n                />\n              );\n            }}\n          />\n        </div>\n\n        <div className=\"element-wrapper\">\n          <Controller\n            name=\"password\"\n            rules={{\n              required: {\n                value: true,\n                message: USER_LOGIN_FORM.REQUIRED_PASSWORD,\n              },\n            }}\n            control={control}\n            render={({ field }) => {\n              return (\n                <FloatingInput\n                  aria-invalid={errors.password ? \"true\" : \"false\"}\n                  errors={errors.password}\n                  type=\"password\"\n                  errorMsg={errors.password?.message}\n                  label=\"Password\"\n                  variant=\"vehicleDetails\"\n                  {...field}\n                />\n              );\n            }}\n          />\n        </div>\n      </form>\n\n      <div className=\"forgot-wrapper\">\n        <a href=\"/forgot-password\">Forgot password?</a>\n      </div>\n\n      <div className=\"button-wrapper\">\n        <Button appearance=\"primary\" onClick={handleSubmit(onSubmit)} className=\"login-button\">\n          {\"Continue test\"}\n        </Button>\n        {/* <button\n          type=\"button\"\n          className=\"activation-button\"\n          disabled={!hasRequiredFields()}\n          onClick={handleSubmit(onSubmit)}\n        >\n          Continue */}\n        {/* </button> */}\n      </div>\n\n      <ActivationFooter />\n    </div>\n  );\n};\n\nexport default LoginScreen;\n","export function convertToSentenceCase(str) {\n    let sentenceCasedStr = \"\";\n  \n    try {\n      const result = str.replace(/([A-Z])/g, ' $1');\n      sentenceCasedStr = result.charAt(0).toUpperCase() + result.slice(1);\n  \n    } catch (e) {\n      console.log('Error in converting string, original string returned', e);\n      sentenceCasedStr = str;\n    }\n  \n    return sentenceCasedStr;\n  }"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Button","forwardRef","props","className","label","_props$tag","tag","Tag","_props$loading","loading","_props$size","size","_props$appearance","appearance","onClick","outbound","visible","children","attributes","_objectWithoutProperties","_excluded","buttonClasses","styles","button","join","_jsxs","_objectSpread","displayName","CustomInput","React","_props$type","_props$placeholder","placeholder","text","_props$className","_props$errors","errors","_props$errorMsg","errorMsg","_props$label","register","filled","_props$isRequired","isRequired","_props$editable","editable","leftIcon","rightIcon","isClearable","variant","maxedWidth","endAdornment","_useState2","_slicedToArray","useState","showPassword","dataTestId","width","jsxs","concat","_jsx","jsx","autoComplete","onChange","event","required","id","htmlFor","role","toString","FloatingInput","_ref","_ref$errors","_ref$label","_ref$onChange","_ref$isRequired","_ref$isClearable","_ref$variant","_ref$value","value","restProps","val","setVal","useEffect","target","isCheckBoxInput","element","isDateObject","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","undefined","get","object","path","defaultValue","result","split","reduce","isBoolean","isKey","test","stringToPath","input","replace","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","createContext","useFormContext","useContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","_props","useRef","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","useController","methods","shouldUnregister","isArrayField","array","_name","_subjects","values","updateValue","_formValues","_getWatch","_removeUnmounted","useWatch","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","validatingFields","isValidating","isValid","_updateFormState","state","_updateValid","useFormState","_registerProps","rules","_shouldUnregisterField","_options","updateMounted","field","_fields","_f","mount","_state","action","unregister","_updateDisabledField","fields","useCallback","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","enumerable","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","slice","iterateFieldsByAction","fieldsNames","abortEarly","currentField","refs","updateFieldArrayRootError","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","maxLength","minLength","min","max","pattern","validate","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","foundError","pop","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","fieldReference","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","setError","currentError","currentRef","restOfErrorTree","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","e","onValidError","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","resetOptions","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","USER_LOGIN_FORM","ActivationFooter","privacyPolicyLink","termsOfUseLink","href","ActivationHeader","title","subtitle","siteLogo","dangerouslySetInnerHTML","__html","_useForm","_formControl","_values","useForm","setLoading","_ref2","_regeneratorRuntime","mark","_callee","wrap","_context","prev","stop","apply","this","arguments","handleKeyPress","addEventListener","removeEventListener","noValidate","_ref3","_errors$username","username","_ref4","_errors$password","password","str","sentenceCasedStr","charAt","toUpperCase","console","log"],"mappings":"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","x_google_ignoreList":[0,4]}