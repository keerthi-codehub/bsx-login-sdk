{"version":3,"file":"index.es.js","sources":["../node_modules/style-inject/dist/style-inject.es.js","../src/components/Button/Button.jsx","../src/components/CustomInput/Input.jsx","../src/components/FloatingInput/FloatingInput.jsx","../src/utils/string/index.js","../node_modules/react-hook-form/dist/index.esm.mjs","../src/modules/login/constants.js","../src/modules/login/components/ActivationFooter.jsx","../src/modules/login/components/ActivationHeader.jsx","../src/modules/login/Login.jsx"],"sourcesContent":["function styleInject(css, ref) {\n  if ( ref === void 0 ) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') { return; }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nexport default styleInject;\n","\nimport React, { forwardRef} from 'react';\n// import { DotSpinner } from '../DotSpinner';\nimport styles from './Button.module.css';\n\n// interface ButtonProps extends React.HTMLAttributes<HTMLDivElement> {\n// \tclassName?: string;\n// \tlabel?: ReactNode;\n// \tappearance?: 'primary' | 'secondary';\n// \tsize?: 'small' | 'large';\n// \ttag?: ElementType;\n// \ttype?: 'submit' | 'button' | 'reset';\n// \tdisabled?: boolean;\n// \tloading?: boolean;\n// \tvisible?: boolean;\n// \toutbound?: boolean;\n// \tonClick?: () => void;\n// \tchildren?: ReactNode;\n// }\n\nexport const Button = forwardRef(\n\t(props, ref) => {\n\t\tconst {\n\t\t\tclassName,\n\t\t\tlabel,\n\t\t\ttag: Tag = 'button',\n\t\t\tloading = false,\n\t\t\tsize = 'large',\n\t\t\tappearance = 'primary',\n\t\t\tonClick,\n\t\t\toutbound,\n\t\t\tvisible,\n\t\t\tchildren,\n\t\t\t...attributes\n\t\t} = props;\n\n\t\tconst buttonClasses = [\n\t\t\tstyles.button,\n\t\t\tstyles[appearance],\n\t\t\tstyles[size],\n\t\t\tclassName,\n\t\t].join(' ');\n\n\t\treturn (\n\t\t\t<Tag\n\t\t\t\tref={ref}\n\t\t\t\tclassName={buttonClasses}\n\t\t\t\t{...attributes}\n\t\t\t\tonClick={onClick}>\n\t\t\t\t{!loading && children}\n\t\t\t\t{!loading && label}\n\t\t\t\t{/* {loading && <DotSpinner />} */}\n\t\t\t</Tag>\n\t\t);\n\t}\n);\n\nButton.displayName = 'Button';\n","import React, { ChangeEvent, useState } from 'react';\n// import IconButton from '@mui/material/IconButton';\n// import { Clear } from '@styled-icons/material-outlined';\n// import InputAdornment from '@mui/material/InputAdornment';\nimport './input.css'; // Import the CSS file\n// import VisibilityOffOutlinedIcon from '../../icons/icons-js-format/VisibilityOffOutlinedIcon';\n// import VisibilityOutlinedIcon from '../../icons/icons-js-format/VisibilityOutlinedIcon';\n\nexport const CustomInput = React.forwardRef(\n\t(props, ref) => {\n\t\tconst {\n\t\t\ttype = 'text',\n\t\t\tplaceholder = '',\n\t\t\ttext = '',\n\t\t\tclassName = '',\n\t\t\terrors = false,\n\t\t\terrorMsg = '',\n\t\t\tlabel = '',\n\t\t\tregister,\n\t\t\tfilled = '',\n\t\t\tisRequired = false,\n\t\t\teditable = false,\n\t\t\tleftIcon,\n\t\t\trightIcon,\n\t\t\tisClearable = false,\n\t\t\tvariant = '',\n\t\t\tmaxedWidth,\n\t\t\tendAdornment,\n\t\t\t...attributes\n\t\t} = props;\n\n\t\tconst [showPassword, setShowPassword] = useState(false);\n\n\t\tconst handleClickShowPassword = () => setShowPassword((show) => !show);\n\n\t\tconst handleMouseDownPassword = (event) => {\n\t\t\tevent.preventDefault();\n\t\t};\n\n\t\tconst handleOnChange = (event) => {\n\t\t\tconst { onChange } = props;\n\t\t\tif (onChange) {\n\t\t\t\tonChange(event);\n\t\t\t}\n\t\t};\n\n\t\tconst clearValue = () => {\n\t\t\tconst { onChange } = props;\n\t\t\tif (onChange) {\n\t\t\t\tonChange({ target: { value: '' } });\n\t\t\t}\n\t\t};\n\n\t\tconst dataTestId = attributes['data-testid'];\n\t\tdelete attributes['data-testid'];\n\n\t\treturn (\n\t\t\t<div\n\t\t\t\tclassName='input-group-wrapper' styles={{width: maxedWidth? '100%': ''}}>\n\t\t\t\t<div\n\t\t\t\t\tclassName={`custom-input-container ${\n\t\t\t\t\t\terrors ? 'errors' : ''\n\t\t\t\t\t} ${editable ? 'editable' : ''}`}\n\t\t\t\t\t{...attributes}>\n\t\t\t\t\t<input\n\t\t\t\t\t\tautoComplete=\"off\"\n\t\t\t\t\t\tdata-testid={dataTestId}\n\t\t\t\t\t\tclassName={`StyledInput ${editable ? 'editable' : ''} ${\n\t\t\t\t\t\t\terrors ? 'errors' : ''\n\t\t\t\t\t\t} ${className}`}\n\t\t\t\t\t\ttype={type === 'password' && showPassword ? 'text' : type}\n\t\t\t\t\t\tplaceholder={placeholder}\n\t\t\t\t\t\t{...attributes}\n\t\t\t\t\t\tref={ref}\n\t\t\t\t\t\tonChange={handleOnChange}\n\t\t\t\t\t\trequired={isRequired}\n\t\t\t\t\t\taria-label={label}\n\t\t\t\t\t\tid={`text-field-${label}`}\n\t\t\t\t\t/>\n\t\t\t\t\t{!editable && (\n\t\t\t\t\t\t<label\n\t\t\t\t\t\t\tclassName={`styled-label ${leftIcon ? 'leftIcon' : ''}`}\n\t\t\t\t\t\t\thtmlFor={`text-field-${label}`}>\n\t\t\t\t\t\t\t{label}\n\t\t\t\t\t\t</label>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"styled-error-container\">\n\t\t\t\t\t{isRequired && (\n\t\t\t\t\t\t<span className=\"required-text\" role=\"alert\">\n\t\t\t\t\t\t\t* Required\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t\t{errorMsg && (\n\t\t\t\t\t\t<span\n\t\t\t\t\t\t\tclassName=\"error-text\"\n\t\t\t\t\t\t\trole=\"alert\">\n\t\t\t\t\t\t\t{errorMsg.toString()}\n\t\t\t\t\t\t</span>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n);\n\nexport default CustomInput;\n","import React, { useEffect, useState } from \"react\";\nimport { CustomInput } from \"../CustomInput\";\nimport \"./floatingInput.module.css\";\n\nconst FloatingInput = ({\n  errors = false,\n  label = \"\",\n  onChange = (event) => event,\n  register,\n  isRequired = false,\n  leftIcon,\n  rightIcon,\n  isClearable = false,\n  variant = \"\",\n  value = \"\",\n  width,\n  ...restProps\n}) => {\n  const [val, setVal] = useState(value);\n\n  const handleChange = (event) => {\n    setVal(event.target.value);\n    onChange(event);\n  };\n\n  useEffect(() => {\n    setVal(value);\n  }, [value]);\n\n  return (\n    // <div class=\"input-group\">\n\t// \t\t\t\t<input\n\t// \t\t\t\t\tautoComplete=\"off\"\n\t// \t\t\t\t\t// className={`StyledInput ${editable ? 'editable' : ''} ${\n\t// \t\t\t\t\t// \terrors ? 'errors' : ''\n\t// \t\t\t\t\t// } ${className}`}\n\t// \t\t\t\t\t// type={type === 'password' && showPassword ? 'text' : type}\n\t// \t\t\t\t\ttype={type ?? 'text'}\n\t// \t\t\t\t\tplaceholder={placeholder}\n\t// \t\t\t\t\t{...restProps}\n\t// \t\t\t\t\tref={ref}\n\t// \t\t\t\t\tonChange={handleOnChange}\n\t// \t\t\t\t\trequired={isRequired}\n\t// \t\t\t\t\taria-label={label}\n\t// \t\t\t\t\tid={`text-field-${label}`}\n\t// \t\t\t\t/>\n\t// \t\t\t\t{!editable && (\n\t// \t\t\t\t\t<label\n\t// \t\t\t\t\t\t// className={`styled-label ${leftIcon ? 'leftIcon' : ''}`}\n\t// \t\t\t\t\t\thtmlFor={`text-field-${label}`}>\n\t// \t\t\t\t\t\t{label}\n\t// \t\t\t\t\t</label>\n\t// \t\t\t\t)}\n    //   {/* <input type=\"text\" required />\n    //   <span class=\"highlight\"></span>\n    //   <span class=\"bar\"></span>\n    //   <label>Username</label> */}\n    // </div>\n    <div className='floating-input-container' style={{ width }}>\n    \t<CustomInput\n    \t\tleftIcon={leftIcon}\n    \t\trightIcon={rightIcon}\n    \t\tisClearable={isClearable}\n    \t\terrors={errors}\n    \t\tisRequired={isRequired}\n    \t\tfilled={!!val}\n    \t\tvariant={variant}\n    \t\tregister={register}\n    \t\tonChange={handleChange}\n    \t\tlabel={label}\n    \t\tvalue={val}\n    \t\ttext={val}\n    \t\t{...restProps}\n    \t/>\n </div>\n  );\n};\n\nexport default FloatingInput;\n","export function convertToSentenceCase(str) {\n    let sentenceCasedStr = \"\";\n  \n    try {\n      const result = str.replace(/([A-Z])/g, ' $1');\n      sentenceCasedStr = result.charAt(0).toUpperCase() + result.slice(1);\n  \n    } catch (e) {\n      console.log('Error in converting string, original string returned', e);\n      sentenceCasedStr = str;\n    }\n  \n    return sentenceCasedStr;\n  }","import React from 'react';\n\nvar isCheckBoxInput = (element) => element.type === 'checkbox';\n\nvar isDateObject = (value) => value instanceof Date;\n\nvar isNullOrUndefined = (value) => value == null;\n\nconst isObjectType = (value) => typeof value === 'object';\nvar isObject = (value) => !isNullOrUndefined(value) &&\n    !Array.isArray(value) &&\n    isObjectType(value) &&\n    !isDateObject(value);\n\nvar getEventValue = (event) => isObject(event) && event.target\n    ? isCheckBoxInput(event.target)\n        ? event.target.checked\n        : event.target.value\n    : event;\n\nvar getNodeParentName = (name) => name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n\nvar isNameInFieldArray = (names, name) => names.has(getNodeParentName(name));\n\nvar isPlainObject = (tempObject) => {\n    const prototypeCopy = tempObject.constructor && tempObject.constructor.prototype;\n    return (isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf'));\n};\n\nvar isWeb = typeof window !== 'undefined' &&\n    typeof window.HTMLElement !== 'undefined' &&\n    typeof document !== 'undefined';\n\nfunction cloneObject(data) {\n    let copy;\n    const isArray = Array.isArray(data);\n    if (data instanceof Date) {\n        copy = new Date(data);\n    }\n    else if (data instanceof Set) {\n        copy = new Set(data);\n    }\n    else if (!(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n        (isArray || isObject(data))) {\n        copy = isArray ? [] : {};\n        if (!isArray && !isPlainObject(data)) {\n            copy = data;\n        }\n        else {\n            for (const key in data) {\n                if (data.hasOwnProperty(key)) {\n                    copy[key] = cloneObject(data[key]);\n                }\n            }\n        }\n    }\n    else {\n        return data;\n    }\n    return copy;\n}\n\nvar compact = (value) => Array.isArray(value) ? value.filter(Boolean) : [];\n\nvar isUndefined = (val) => val === undefined;\n\nvar get = (object, path, defaultValue) => {\n    if (!path || !isObject(object)) {\n        return defaultValue;\n    }\n    const result = compact(path.split(/[,[\\].]+?/)).reduce((result, key) => isNullOrUndefined(result) ? result : result[key], object);\n    return isUndefined(result) || result === object\n        ? isUndefined(object[path])\n            ? defaultValue\n            : object[path]\n        : result;\n};\n\nvar isBoolean = (value) => typeof value === 'boolean';\n\nvar isKey = (value) => /^\\w*$/.test(value);\n\nvar stringToPath = (input) => compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n\nvar set = (object, path, value) => {\n    let index = -1;\n    const tempPath = isKey(path) ? [path] : stringToPath(path);\n    const length = tempPath.length;\n    const lastIndex = length - 1;\n    while (++index < length) {\n        const key = tempPath[index];\n        let newValue = value;\n        if (index !== lastIndex) {\n            const objValue = object[key];\n            newValue =\n                isObject(objValue) || Array.isArray(objValue)\n                    ? objValue\n                    : !isNaN(+tempPath[index + 1])\n                        ? []\n                        : {};\n        }\n        if (key === '__proto__') {\n            return;\n        }\n        object[key] = newValue;\n        object = object[key];\n    }\n    return object;\n};\n\nconst EVENTS = {\n    BLUR: 'blur',\n    FOCUS_OUT: 'focusout',\n    CHANGE: 'change',\n};\nconst VALIDATION_MODE = {\n    onBlur: 'onBlur',\n    onChange: 'onChange',\n    onSubmit: 'onSubmit',\n    onTouched: 'onTouched',\n    all: 'all',\n};\nconst INPUT_VALIDATION_RULES = {\n    max: 'max',\n    min: 'min',\n    maxLength: 'maxLength',\n    minLength: 'minLength',\n    pattern: 'pattern',\n    required: 'required',\n    validate: 'validate',\n};\n\nconst HookFormContext = React.createContext(null);\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst useFormContext = () => React.useContext(HookFormContext);\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nconst FormProvider = (props) => {\n    const { children, ...data } = props;\n    return (React.createElement(HookFormContext.Provider, { value: data }, children));\n};\n\nvar getProxyFormState = (formState, control, localProxyFormState, isRoot = true) => {\n    const result = {\n        defaultValues: control._defaultValues,\n    };\n    for (const key in formState) {\n        Object.defineProperty(result, key, {\n            get: () => {\n                const _key = key;\n                if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n                    control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n                }\n                localProxyFormState && (localProxyFormState[_key] = true);\n                return formState[_key];\n            },\n        });\n    }\n    return result;\n};\n\nvar isEmptyObject = (value) => isObject(value) && !Object.keys(value).length;\n\nvar shouldRenderFormState = (formStateData, _proxyFormState, updateFormState, isRoot) => {\n    updateFormState(formStateData);\n    const { name, ...formState } = formStateData;\n    return (isEmptyObject(formState) ||\n        Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n        Object.keys(formState).find((key) => _proxyFormState[key] ===\n            (!isRoot || VALIDATION_MODE.all)));\n};\n\nvar convertToArrayPayload = (value) => (Array.isArray(value) ? value : [value]);\n\nvar shouldSubscribeByName = (name, signalName, exact) => !name ||\n    !signalName ||\n    name === signalName ||\n    convertToArrayPayload(name).some((currentName) => currentName &&\n        (exact\n            ? currentName === signalName\n            : currentName.startsWith(signalName) ||\n                signalName.startsWith(currentName)));\n\nfunction useSubscribe(props) {\n    const _props = React.useRef(props);\n    _props.current = props;\n    React.useEffect(() => {\n        const subscription = !props.disabled &&\n            _props.current.subject &&\n            _props.current.subject.subscribe({\n                next: _props.current.next,\n            });\n        return () => {\n            subscription && subscription.unsubscribe();\n        };\n    }, [props.disabled]);\n}\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState(props) {\n    const methods = useFormContext();\n    const { control = methods.control, disabled, name, exact } = props || {};\n    const [formState, updateFormState] = React.useState(control._formState);\n    const _mounted = React.useRef(true);\n    const _localProxyFormState = React.useRef({\n        isDirty: false,\n        isLoading: false,\n        dirtyFields: false,\n        touchedFields: false,\n        validatingFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    });\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        next: (value) => _mounted.current &&\n            shouldSubscribeByName(_name.current, value.name, exact) &&\n            shouldRenderFormState(value, _localProxyFormState.current, control._updateFormState) &&\n            updateFormState({\n                ...control._formState,\n                ...value,\n            }),\n        subject: control._subjects.state,\n    });\n    React.useEffect(() => {\n        _mounted.current = true;\n        _localProxyFormState.current.isValid && control._updateValid(true);\n        return () => {\n            _mounted.current = false;\n        };\n    }, [control]);\n    return getProxyFormState(formState, control, _localProxyFormState.current, false);\n}\n\nvar isString = (value) => typeof value === 'string';\n\nvar generateWatchOutput = (names, _names, formValues, isGlobal, defaultValue) => {\n    if (isString(names)) {\n        isGlobal && _names.watch.add(names);\n        return get(formValues, names, defaultValue);\n    }\n    if (Array.isArray(names)) {\n        return names.map((fieldName) => (isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)));\n    }\n    isGlobal && (_names.watchAll = true);\n    return formValues;\n};\n\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nfunction useWatch(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, defaultValue, disabled, exact, } = props || {};\n    const _name = React.useRef(name);\n    _name.current = name;\n    useSubscribe({\n        disabled,\n        subject: control._subjects.values,\n        next: (formState) => {\n            if (shouldSubscribeByName(_name.current, formState.name, exact)) {\n                updateValue(cloneObject(generateWatchOutput(_name.current, control._names, formState.values || control._formValues, false, defaultValue)));\n            }\n        },\n    });\n    const [value, updateValue] = React.useState(control._getWatch(name, defaultValue));\n    React.useEffect(() => control._removeUnmounted());\n    return value;\n}\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nfunction useController(props) {\n    const methods = useFormContext();\n    const { name, disabled, control = methods.control, shouldUnregister } = props;\n    const isArrayField = isNameInFieldArray(control._names.array, name);\n    const value = useWatch({\n        control,\n        name,\n        defaultValue: get(control._formValues, name, get(control._defaultValues, name, props.defaultValue)),\n        exact: true,\n    });\n    const formState = useFormState({\n        control,\n        name,\n    });\n    const _registerProps = React.useRef(control.register(name, {\n        ...props.rules,\n        value,\n        ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }));\n    React.useEffect(() => {\n        const _shouldUnregisterField = control._options.shouldUnregister || shouldUnregister;\n        const updateMounted = (name, value) => {\n            const field = get(control._fields, name);\n            if (field && field._f) {\n                field._f.mount = value;\n            }\n        };\n        updateMounted(name, true);\n        if (_shouldUnregisterField) {\n            const value = cloneObject(get(control._options.defaultValues, name));\n            set(control._defaultValues, name, value);\n            if (isUndefined(get(control._formValues, name))) {\n                set(control._formValues, name, value);\n            }\n        }\n        return () => {\n            (isArrayField\n                ? _shouldUnregisterField && !control._state.action\n                : _shouldUnregisterField)\n                ? control.unregister(name)\n                : updateMounted(name, false);\n        };\n    }, [name, control, isArrayField, shouldUnregister]);\n    React.useEffect(() => {\n        if (get(control._fields, name)) {\n            control._updateDisabledField({\n                disabled,\n                fields: control._fields,\n                name,\n                value: get(control._fields, name)._f.value,\n            });\n        }\n    }, [disabled, name, control]);\n    return {\n        field: {\n            name,\n            value,\n            ...(isBoolean(disabled) || formState.disabled\n                ? { disabled: formState.disabled || disabled }\n                : {}),\n            onChange: React.useCallback((event) => _registerProps.current.onChange({\n                target: {\n                    value: getEventValue(event),\n                    name: name,\n                },\n                type: EVENTS.CHANGE,\n            }), [name]),\n            onBlur: React.useCallback(() => _registerProps.current.onBlur({\n                target: {\n                    value: get(control._formValues, name),\n                    name: name,\n                },\n                type: EVENTS.BLUR,\n            }), [name, control]),\n            ref: (elm) => {\n                const field = get(control._fields, name);\n                if (field && elm) {\n                    field._f.ref = {\n                        focus: () => elm.focus(),\n                        select: () => elm.select(),\n                        setCustomValidity: (message) => elm.setCustomValidity(message),\n                        reportValidity: () => elm.reportValidity(),\n                    };\n                }\n            },\n        },\n        formState,\n        fieldState: Object.defineProperties({}, {\n            invalid: {\n                enumerable: true,\n                get: () => !!get(formState.errors, name),\n            },\n            isDirty: {\n                enumerable: true,\n                get: () => !!get(formState.dirtyFields, name),\n            },\n            isTouched: {\n                enumerable: true,\n                get: () => !!get(formState.touchedFields, name),\n            },\n            isValidating: {\n                enumerable: true,\n                get: () => !!get(formState.validatingFields, name),\n            },\n            error: {\n                enumerable: true,\n                get: () => get(formState.errors, name),\n            },\n        }),\n    };\n}\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = (props) => props.render(useController(props));\n\nconst POST_REQUEST = 'post';\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form(props) {\n    const methods = useFormContext();\n    const [mounted, setMounted] = React.useState(false);\n    const { control = methods.control, onSubmit, children, action, method = POST_REQUEST, headers, encType, onError, render, onSuccess, validateStatus, ...rest } = props;\n    const submit = async (event) => {\n        let hasError = false;\n        let type = '';\n        await control.handleSubmit(async (data) => {\n            const formData = new FormData();\n            let formDataJson = '';\n            try {\n                formDataJson = JSON.stringify(data);\n            }\n            catch (_a) { }\n            for (const name of control._names.mount) {\n                formData.append(name, get(data, name));\n            }\n            if (onSubmit) {\n                await onSubmit({\n                    data,\n                    event,\n                    method,\n                    formData,\n                    formDataJson,\n                });\n            }\n            if (action) {\n                try {\n                    const shouldStringifySubmissionData = [\n                        headers && headers['Content-Type'],\n                        encType,\n                    ].some((value) => value && value.includes('json'));\n                    const response = await fetch(action, {\n                        method,\n                        headers: {\n                            ...headers,\n                            ...(encType ? { 'Content-Type': encType } : {}),\n                        },\n                        body: shouldStringifySubmissionData ? formDataJson : formData,\n                    });\n                    if (response &&\n                        (validateStatus\n                            ? !validateStatus(response.status)\n                            : response.status < 200 || response.status >= 300)) {\n                        hasError = true;\n                        onError && onError({ response });\n                        type = String(response.status);\n                    }\n                    else {\n                        onSuccess && onSuccess({ response });\n                    }\n                }\n                catch (error) {\n                    hasError = true;\n                    onError && onError({ error });\n                }\n            }\n        })(event);\n        if (hasError && props.control) {\n            props.control._subjects.state.next({\n                isSubmitSuccessful: false,\n            });\n            props.control.setError('root.server', {\n                type,\n            });\n        }\n    };\n    React.useEffect(() => {\n        setMounted(true);\n    }, []);\n    return render ? (React.createElement(React.Fragment, null, render({\n        submit,\n    }))) : (React.createElement(\"form\", { noValidate: mounted, action: action, method: method, encType: encType, onSubmit: submit, ...rest }, children));\n}\n\nvar appendErrors = (name, validateAllFieldCriteria, errors, type, message) => validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n            ...(errors[name] && errors[name].types ? errors[name].types : {}),\n            [type]: message || true,\n        },\n    }\n    : {};\n\nvar generateId = () => {\n    const d = typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n        const r = (Math.random() * 16 + d) % 16 | 0;\n        return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n    });\n};\n\nvar getFocusFieldName = (name, index, options = {}) => options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n        `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n\nvar getValidationModes = (mode) => ({\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n\nvar isWatched = (name, _names, isBlurEvent) => !isBlurEvent &&\n    (_names.watchAll ||\n        _names.watch.has(name) ||\n        [..._names.watch].some((watchName) => name.startsWith(watchName) &&\n            /^\\.\\w+/.test(name.slice(watchName.length))));\n\nconst iterateFieldsByAction = (fields, action, fieldsNames, abortEarly) => {\n    for (const key of fieldsNames || Object.keys(fields)) {\n        const field = get(fields, key);\n        if (field) {\n            const { _f, ...currentField } = field;\n            if (_f) {\n                if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n                    break;\n                }\n                else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n                    break;\n                }\n                else {\n                    iterateFieldsByAction(currentField, action);\n                }\n            }\n            else if (isObject(currentField)) {\n                iterateFieldsByAction(currentField, action);\n            }\n        }\n    }\n};\n\nvar updateFieldArrayRootError = (errors, error, name) => {\n    const fieldArrayErrors = convertToArrayPayload(get(errors, name));\n    set(fieldArrayErrors, 'root', error[name]);\n    set(errors, name, fieldArrayErrors);\n    return errors;\n};\n\nvar isFileInput = (element) => element.type === 'file';\n\nvar isFunction = (value) => typeof value === 'function';\n\nvar isHTMLElement = (value) => {\n    if (!isWeb) {\n        return false;\n    }\n    const owner = value ? value.ownerDocument : 0;\n    return (value instanceof\n        (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement));\n};\n\nvar isMessage = (value) => isString(value);\n\nvar isRadioInput = (element) => element.type === 'radio';\n\nvar isRegex = (value) => value instanceof RegExp;\n\nconst defaultResult = {\n    value: false,\n    isValid: false,\n};\nconst validResult = { value: true, isValid: true };\nvar getCheckboxValue = (options) => {\n    if (Array.isArray(options)) {\n        if (options.length > 1) {\n            const values = options\n                .filter((option) => option && option.checked && !option.disabled)\n                .map((option) => option.value);\n            return { value: values, isValid: !!values.length };\n        }\n        return options[0].checked && !options[0].disabled\n            ? // @ts-expect-error expected to work in the browser\n                options[0].attributes && !isUndefined(options[0].attributes.value)\n                    ? isUndefined(options[0].value) || options[0].value === ''\n                        ? validResult\n                        : { value: options[0].value, isValid: true }\n                    : validResult\n            : defaultResult;\n    }\n    return defaultResult;\n};\n\nconst defaultReturn = {\n    isValid: false,\n    value: null,\n};\nvar getRadioValue = (options) => Array.isArray(options)\n    ? options.reduce((previous, option) => option && option.checked && !option.disabled\n        ? {\n            isValid: true,\n            value: option.value,\n        }\n        : previous, defaultReturn)\n    : defaultReturn;\n\nfunction getValidateError(result, ref, type = 'validate') {\n    if (isMessage(result) ||\n        (Array.isArray(result) && result.every(isMessage)) ||\n        (isBoolean(result) && !result)) {\n        return {\n            type,\n            message: isMessage(result) ? result : '',\n            ref,\n        };\n    }\n}\n\nvar getValueAndMessage = (validationData) => isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n    };\n\nvar validateField = async (field, formValues, validateAllFieldCriteria, shouldUseNativeValidation, isFieldArray) => {\n    const { ref, refs, required, maxLength, minLength, min, max, pattern, validate, name, valueAsNumber, mount, disabled, } = field._f;\n    const inputValue = get(formValues, name);\n    if (!mount || disabled) {\n        return {};\n    }\n    const inputRef = refs ? refs[0] : ref;\n    const setCustomValidity = (message) => {\n        if (shouldUseNativeValidation && inputRef.reportValidity) {\n            inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n            inputRef.reportValidity();\n        }\n    };\n    const error = {};\n    const isRadio = isRadioInput(ref);\n    const isCheckBox = isCheckBoxInput(ref);\n    const isRadioOrCheckbox = isRadio || isCheckBox;\n    const isEmpty = ((valueAsNumber || isFileInput(ref)) &&\n        isUndefined(ref.value) &&\n        isUndefined(inputValue)) ||\n        (isHTMLElement(ref) && ref.value === '') ||\n        inputValue === '' ||\n        (Array.isArray(inputValue) && !inputValue.length);\n    const appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n    const getMinMaxMessage = (exceedMax, maxLengthMessage, minLengthMessage, maxType = INPUT_VALIDATION_RULES.maxLength, minType = INPUT_VALIDATION_RULES.minLength) => {\n        const message = exceedMax ? maxLengthMessage : minLengthMessage;\n        error[name] = {\n            type: exceedMax ? maxType : minType,\n            message,\n            ref,\n            ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n        };\n    };\n    if (isFieldArray\n        ? !Array.isArray(inputValue) || !inputValue.length\n        : required &&\n            ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n                (isBoolean(inputValue) && !inputValue) ||\n                (isCheckBox && !getCheckboxValue(refs).isValid) ||\n                (isRadio && !getRadioValue(refs).isValid))) {\n        const { value, message } = isMessage(required)\n            ? { value: !!required, message: required }\n            : getValueAndMessage(required);\n        if (value) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.required,\n                message,\n                ref: inputRef,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n        let exceedMax;\n        let exceedMin;\n        const maxOutput = getValueAndMessage(max);\n        const minOutput = getValueAndMessage(min);\n        if (!isNullOrUndefined(inputValue) && !isNaN(inputValue)) {\n            const valueNumber = ref.valueAsNumber ||\n                (inputValue ? +inputValue : inputValue);\n            if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n            }\n            if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n            }\n        }\n        else {\n            const valueDate = ref.valueAsDate || new Date(inputValue);\n            const convertTimeToDate = (time) => new Date(new Date().toDateString() + ' ' + time);\n            const isTime = ref.type == 'time';\n            const isWeek = ref.type == 'week';\n            if (isString(maxOutput.value) && inputValue) {\n                exceedMax = isTime\n                    ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n                    : isWeek\n                        ? inputValue > maxOutput.value\n                        : valueDate > new Date(maxOutput.value);\n            }\n            if (isString(minOutput.value) && inputValue) {\n                exceedMin = isTime\n                    ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n                    : isWeek\n                        ? inputValue < minOutput.value\n                        : valueDate < new Date(minOutput.value);\n            }\n        }\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if ((maxLength || minLength) &&\n        !isEmpty &&\n        (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))) {\n        const maxLengthOutput = getValueAndMessage(maxLength);\n        const minLengthOutput = getValueAndMessage(minLength);\n        const exceedMax = !isNullOrUndefined(maxLengthOutput.value) &&\n            inputValue.length > +maxLengthOutput.value;\n        const exceedMin = !isNullOrUndefined(minLengthOutput.value) &&\n            inputValue.length < +minLengthOutput.value;\n        if (exceedMax || exceedMin) {\n            getMinMaxMessage(exceedMax, maxLengthOutput.message, minLengthOutput.message);\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(error[name].message);\n                return error;\n            }\n        }\n    }\n    if (pattern && !isEmpty && isString(inputValue)) {\n        const { value: patternValue, message } = getValueAndMessage(pattern);\n        if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n            error[name] = {\n                type: INPUT_VALIDATION_RULES.pattern,\n                message,\n                ref,\n                ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n            };\n            if (!validateAllFieldCriteria) {\n                setCustomValidity(message);\n                return error;\n            }\n        }\n    }\n    if (validate) {\n        if (isFunction(validate)) {\n            const result = await validate(inputValue, formValues);\n            const validateError = getValidateError(result, inputRef);\n            if (validateError) {\n                error[name] = {\n                    ...validateError,\n                    ...appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message),\n                };\n                if (!validateAllFieldCriteria) {\n                    setCustomValidity(validateError.message);\n                    return error;\n                }\n            }\n        }\n        else if (isObject(validate)) {\n            let validationResult = {};\n            for (const key in validate) {\n                if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n                    break;\n                }\n                const validateError = getValidateError(await validate[key](inputValue, formValues), inputRef, key);\n                if (validateError) {\n                    validationResult = {\n                        ...validateError,\n                        ...appendErrorsCurry(key, validateError.message),\n                    };\n                    setCustomValidity(validateError.message);\n                    if (validateAllFieldCriteria) {\n                        error[name] = validationResult;\n                    }\n                }\n            }\n            if (!isEmptyObject(validationResult)) {\n                error[name] = {\n                    ref: inputRef,\n                    ...validationResult,\n                };\n                if (!validateAllFieldCriteria) {\n                    return error;\n                }\n            }\n        }\n    }\n    setCustomValidity(true);\n    return error;\n};\n\nvar appendAt = (data, value) => [\n    ...data,\n    ...convertToArrayPayload(value),\n];\n\nvar fillEmptyArray = (value) => Array.isArray(value) ? value.map(() => undefined) : undefined;\n\nfunction insert(data, index, value) {\n    return [\n        ...data.slice(0, index),\n        ...convertToArrayPayload(value),\n        ...data.slice(index),\n    ];\n}\n\nvar moveArrayAt = (data, from, to) => {\n    if (!Array.isArray(data)) {\n        return [];\n    }\n    if (isUndefined(data[to])) {\n        data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n};\n\nvar prependAt = (data, value) => [\n    ...convertToArrayPayload(value),\n    ...convertToArrayPayload(data),\n];\n\nfunction removeAtIndexes(data, indexes) {\n    let i = 0;\n    const temp = [...data];\n    for (const index of indexes) {\n        temp.splice(index - i, 1);\n        i++;\n    }\n    return compact(temp).length ? temp : [];\n}\nvar removeArrayAt = (data, index) => isUndefined(index)\n    ? []\n    : removeAtIndexes(data, convertToArrayPayload(index).sort((a, b) => a - b));\n\nvar swapArrayAt = (data, indexA, indexB) => {\n    [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n\nfunction baseGet(object, updatePath) {\n    const length = updatePath.slice(0, -1).length;\n    let index = 0;\n    while (index < length) {\n        object = isUndefined(object) ? index++ : object[updatePath[index++]];\n    }\n    return object;\n}\nfunction isEmptyArray(obj) {\n    for (const key in obj) {\n        if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction unset(object, path) {\n    const paths = Array.isArray(path)\n        ? path\n        : isKey(path)\n            ? [path]\n            : stringToPath(path);\n    const childObject = paths.length === 1 ? object : baseGet(object, paths);\n    const index = paths.length - 1;\n    const key = paths[index];\n    if (childObject) {\n        delete childObject[key];\n    }\n    if (index !== 0 &&\n        ((isObject(childObject) && isEmptyObject(childObject)) ||\n            (Array.isArray(childObject) && isEmptyArray(childObject)))) {\n        unset(object, paths.slice(0, -1));\n    }\n    return object;\n}\n\nvar updateAt = (fieldValues, index, value) => {\n    fieldValues[index] = value;\n    return fieldValues;\n};\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFieldArray(props) {\n    const methods = useFormContext();\n    const { control = methods.control, name, keyName = 'id', shouldUnregister, } = props;\n    const [fields, setFields] = React.useState(control._getFieldArray(name));\n    const ids = React.useRef(control._getFieldArray(name).map(generateId));\n    const _fieldIds = React.useRef(fields);\n    const _name = React.useRef(name);\n    const _actioned = React.useRef(false);\n    _name.current = name;\n    _fieldIds.current = fields;\n    control._names.array.add(name);\n    props.rules &&\n        control.register(name, props.rules);\n    useSubscribe({\n        next: ({ values, name: fieldArrayName, }) => {\n            if (fieldArrayName === _name.current || !fieldArrayName) {\n                const fieldValues = get(values, _name.current);\n                if (Array.isArray(fieldValues)) {\n                    setFields(fieldValues);\n                    ids.current = fieldValues.map(generateId);\n                }\n            }\n        },\n        subject: control._subjects.array,\n    });\n    const updateValues = React.useCallback((updatedFieldArrayValues) => {\n        _actioned.current = true;\n        control._updateFieldArray(name, updatedFieldArrayValues);\n    }, [control, name]);\n    const append = (value, options) => {\n        const appendValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = appendAt(control._getFieldArray(name), appendValue);\n        control._names.focus = getFocusFieldName(name, updatedFieldArrayValues.length - 1, options);\n        ids.current = appendAt(ids.current, appendValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const prepend = (value, options) => {\n        const prependValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = prependAt(control._getFieldArray(name), prependValue);\n        control._names.focus = getFocusFieldName(name, 0, options);\n        ids.current = prependAt(ids.current, prependValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n            argA: fillEmptyArray(value),\n        });\n    };\n    const remove = (index) => {\n        const updatedFieldArrayValues = removeArrayAt(control._getFieldArray(name), index);\n        ids.current = removeArrayAt(ids.current, index);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n            argA: index,\n        });\n    };\n    const insert$1 = (index, value, options) => {\n        const insertValue = convertToArrayPayload(cloneObject(value));\n        const updatedFieldArrayValues = insert(control._getFieldArray(name), index, insertValue);\n        control._names.focus = getFocusFieldName(name, index, options);\n        ids.current = insert(ids.current, index, insertValue.map(generateId));\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, insert, {\n            argA: index,\n            argB: fillEmptyArray(value),\n        });\n    };\n    const swap = (indexA, indexB) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n        swapArrayAt(ids.current, indexA, indexB);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, swapArrayAt, {\n            argA: indexA,\n            argB: indexB,\n        }, false);\n    };\n    const move = (from, to) => {\n        const updatedFieldArrayValues = control._getFieldArray(name);\n        moveArrayAt(updatedFieldArrayValues, from, to);\n        moveArrayAt(ids.current, from, to);\n        updateValues(updatedFieldArrayValues);\n        setFields(updatedFieldArrayValues);\n        control._updateFieldArray(name, updatedFieldArrayValues, moveArrayAt, {\n            argA: from,\n            argB: to,\n        }, false);\n    };\n    const update = (index, value) => {\n        const updateValue = cloneObject(value);\n        const updatedFieldArrayValues = updateAt(control._getFieldArray(name), index, updateValue);\n        ids.current = [...updatedFieldArrayValues].map((item, i) => !item || i === index ? generateId() : ids.current[i]);\n        updateValues(updatedFieldArrayValues);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, updatedFieldArrayValues, updateAt, {\n            argA: index,\n            argB: updateValue,\n        }, true, false);\n    };\n    const replace = (value) => {\n        const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n        ids.current = updatedFieldArrayValues.map(generateId);\n        updateValues([...updatedFieldArrayValues]);\n        setFields([...updatedFieldArrayValues]);\n        control._updateFieldArray(name, [...updatedFieldArrayValues], (data) => data, {}, true, false);\n    };\n    React.useEffect(() => {\n        control._state.action = false;\n        isWatched(name, control._names) &&\n            control._subjects.state.next({\n                ...control._formState,\n            });\n        if (_actioned.current &&\n            (!getValidationModes(control._options.mode).isOnSubmit ||\n                control._formState.isSubmitted)) {\n            if (control._options.resolver) {\n                control._executeSchema([name]).then((result) => {\n                    const error = get(result.errors, name);\n                    const existingError = get(control._formState.errors, name);\n                    if (existingError\n                        ? (!error && existingError.type) ||\n                            (error &&\n                                (existingError.type !== error.type ||\n                                    existingError.message !== error.message))\n                        : error && error.type) {\n                        error\n                            ? set(control._formState.errors, name, error)\n                            : unset(control._formState.errors, name);\n                        control._subjects.state.next({\n                            errors: control._formState.errors,\n                        });\n                    }\n                });\n            }\n            else {\n                const field = get(control._fields, name);\n                if (field &&\n                    field._f &&\n                    !(getValidationModes(control._options.reValidateMode).isOnSubmit &&\n                        getValidationModes(control._options.mode).isOnSubmit)) {\n                    validateField(field, control._formValues, control._options.criteriaMode === VALIDATION_MODE.all, control._options.shouldUseNativeValidation, true).then((error) => !isEmptyObject(error) &&\n                        control._subjects.state.next({\n                            errors: updateFieldArrayRootError(control._formState.errors, error, name),\n                        }));\n                }\n            }\n        }\n        control._subjects.values.next({\n            name,\n            values: { ...control._formValues },\n        });\n        control._names.focus &&\n            iterateFieldsByAction(control._fields, (ref, key) => {\n                if (control._names.focus &&\n                    key.startsWith(control._names.focus) &&\n                    ref.focus) {\n                    ref.focus();\n                    return 1;\n                }\n                return;\n            });\n        control._names.focus = '';\n        control._updateValid();\n        _actioned.current = false;\n    }, [fields, name, control]);\n    React.useEffect(() => {\n        !get(control._formValues, name) && control._updateFieldArray(name);\n        return () => {\n            (control._options.shouldUnregister || shouldUnregister) &&\n                control.unregister(name);\n        };\n    }, [name, control, keyName, shouldUnregister]);\n    return {\n        swap: React.useCallback(swap, [updateValues, name, control]),\n        move: React.useCallback(move, [updateValues, name, control]),\n        prepend: React.useCallback(prepend, [updateValues, name, control]),\n        append: React.useCallback(append, [updateValues, name, control]),\n        remove: React.useCallback(remove, [updateValues, name, control]),\n        insert: React.useCallback(insert$1, [updateValues, name, control]),\n        update: React.useCallback(update, [updateValues, name, control]),\n        replace: React.useCallback(replace, [updateValues, name, control]),\n        fields: React.useMemo(() => fields.map((field, index) => ({\n            ...field,\n            [keyName]: ids.current[index] || generateId(),\n        })), [fields, keyName]),\n    };\n}\n\nvar createSubject = () => {\n    let _observers = [];\n    const next = (value) => {\n        for (const observer of _observers) {\n            observer.next && observer.next(value);\n        }\n    };\n    const subscribe = (observer) => {\n        _observers.push(observer);\n        return {\n            unsubscribe: () => {\n                _observers = _observers.filter((o) => o !== observer);\n            },\n        };\n    };\n    const unsubscribe = () => {\n        _observers = [];\n    };\n    return {\n        get observers() {\n            return _observers;\n        },\n        next,\n        subscribe,\n        unsubscribe,\n    };\n};\n\nvar isPrimitive = (value) => isNullOrUndefined(value) || !isObjectType(value);\n\nfunction deepEqual(object1, object2) {\n    if (isPrimitive(object1) || isPrimitive(object2)) {\n        return object1 === object2;\n    }\n    if (isDateObject(object1) && isDateObject(object2)) {\n        return object1.getTime() === object2.getTime();\n    }\n    const keys1 = Object.keys(object1);\n    const keys2 = Object.keys(object2);\n    if (keys1.length !== keys2.length) {\n        return false;\n    }\n    for (const key of keys1) {\n        const val1 = object1[key];\n        if (!keys2.includes(key)) {\n            return false;\n        }\n        if (key !== 'ref') {\n            const val2 = object2[key];\n            if ((isDateObject(val1) && isDateObject(val2)) ||\n                (isObject(val1) && isObject(val2)) ||\n                (Array.isArray(val1) && Array.isArray(val2))\n                ? !deepEqual(val1, val2)\n                : val1 !== val2) {\n                return false;\n            }\n        }\n    }\n    return true;\n}\n\nvar isMultipleSelect = (element) => element.type === `select-multiple`;\n\nvar isRadioOrCheckbox = (ref) => isRadioInput(ref) || isCheckBoxInput(ref);\n\nvar live = (ref) => isHTMLElement(ref) && ref.isConnected;\n\nvar objectHasFunction = (data) => {\n    for (const key in data) {\n        if (isFunction(data[key])) {\n            return true;\n        }\n    }\n    return false;\n};\n\nfunction markFieldsDirty(data, fields = {}) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                fields[key] = Array.isArray(data[key]) ? [] : {};\n                markFieldsDirty(data[key], fields[key]);\n            }\n            else if (!isNullOrUndefined(data[key])) {\n                fields[key] = true;\n            }\n        }\n    }\n    return fields;\n}\nfunction getDirtyFieldsFromDefaultValues(data, formValues, dirtyFieldsFromValues) {\n    const isParentNodeArray = Array.isArray(data);\n    if (isObject(data) || isParentNodeArray) {\n        for (const key in data) {\n            if (Array.isArray(data[key]) ||\n                (isObject(data[key]) && !objectHasFunction(data[key]))) {\n                if (isUndefined(formValues) ||\n                    isPrimitive(dirtyFieldsFromValues[key])) {\n                    dirtyFieldsFromValues[key] = Array.isArray(data[key])\n                        ? markFieldsDirty(data[key], [])\n                        : { ...markFieldsDirty(data[key]) };\n                }\n                else {\n                    getDirtyFieldsFromDefaultValues(data[key], isNullOrUndefined(formValues) ? {} : formValues[key], dirtyFieldsFromValues[key]);\n                }\n            }\n            else {\n                dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n            }\n        }\n    }\n    return dirtyFieldsFromValues;\n}\nvar getDirtyFields = (defaultValues, formValues) => getDirtyFieldsFromDefaultValues(defaultValues, formValues, markFieldsDirty(formValues));\n\nvar getFieldValueAs = (value, { valueAsNumber, valueAsDate, setValueAs }) => isUndefined(value)\n    ? value\n    : valueAsNumber\n        ? value === ''\n            ? NaN\n            : value\n                ? +value\n                : value\n        : valueAsDate && isString(value)\n            ? new Date(value)\n            : setValueAs\n                ? setValueAs(value)\n                : value;\n\nfunction getFieldValue(_f) {\n    const ref = _f.ref;\n    if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n        return;\n    }\n    if (isFileInput(ref)) {\n        return ref.files;\n    }\n    if (isRadioInput(ref)) {\n        return getRadioValue(_f.refs).value;\n    }\n    if (isMultipleSelect(ref)) {\n        return [...ref.selectedOptions].map(({ value }) => value);\n    }\n    if (isCheckBoxInput(ref)) {\n        return getCheckboxValue(_f.refs).value;\n    }\n    return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n\nvar getResolverOptions = (fieldsNames, _fields, criteriaMode, shouldUseNativeValidation) => {\n    const fields = {};\n    for (const name of fieldsNames) {\n        const field = get(_fields, name);\n        field && set(fields, name, field._f);\n    }\n    return {\n        criteriaMode,\n        names: [...fieldsNames],\n        fields,\n        shouldUseNativeValidation,\n    };\n};\n\nvar getRuleValue = (rule) => isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n        ? rule.source\n        : isObject(rule)\n            ? isRegex(rule.value)\n                ? rule.value.source\n                : rule.value\n            : rule;\n\nvar hasValidation = (options) => options.mount &&\n    (options.required ||\n        options.min ||\n        options.max ||\n        options.maxLength ||\n        options.minLength ||\n        options.pattern ||\n        options.validate);\n\nfunction schemaErrorLookup(errors, _fields, name) {\n    const error = get(errors, name);\n    if (error || isKey(name)) {\n        return {\n            error,\n            name,\n        };\n    }\n    const names = name.split('.');\n    while (names.length) {\n        const fieldName = names.join('.');\n        const field = get(_fields, fieldName);\n        const foundError = get(errors, fieldName);\n        if (field && !Array.isArray(field) && name !== fieldName) {\n            return { name };\n        }\n        if (foundError && foundError.type) {\n            return {\n                name: fieldName,\n                error: foundError,\n            };\n        }\n        names.pop();\n    }\n    return {\n        name,\n    };\n}\n\nvar skipValidation = (isBlurEvent, isTouched, isSubmitted, reValidateMode, mode) => {\n    if (mode.isOnAll) {\n        return false;\n    }\n    else if (!isSubmitted && mode.isOnTouch) {\n        return !(isTouched || isBlurEvent);\n    }\n    else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n        return !isBlurEvent;\n    }\n    else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n        return isBlurEvent;\n    }\n    return true;\n};\n\nvar unsetEmptyArray = (ref, name) => !compact(get(ref, name)).length && unset(ref, name);\n\nconst defaultOptions = {\n    mode: VALIDATION_MODE.onSubmit,\n    reValidateMode: VALIDATION_MODE.onChange,\n    shouldFocusError: true,\n};\nfunction createFormControl(props = {}) {\n    let _options = {\n        ...defaultOptions,\n        ...props,\n    };\n    let _formState = {\n        submitCount: 0,\n        isDirty: false,\n        isLoading: isFunction(_options.defaultValues),\n        isValidating: false,\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        touchedFields: {},\n        dirtyFields: {},\n        validatingFields: {},\n        errors: _options.errors || {},\n        disabled: _options.disabled || false,\n    };\n    let _fields = {};\n    let _defaultValues = isObject(_options.defaultValues) || isObject(_options.values)\n        ? cloneObject(_options.defaultValues || _options.values) || {}\n        : {};\n    let _formValues = _options.shouldUnregister\n        ? {}\n        : cloneObject(_defaultValues);\n    let _state = {\n        action: false,\n        mount: false,\n        watch: false,\n    };\n    let _names = {\n        mount: new Set(),\n        unMount: new Set(),\n        array: new Set(),\n        watch: new Set(),\n    };\n    let delayErrorCallback;\n    let timer = 0;\n    const _proxyFormState = {\n        isDirty: false,\n        dirtyFields: false,\n        validatingFields: false,\n        touchedFields: false,\n        isValidating: false,\n        isValid: false,\n        errors: false,\n    };\n    const _subjects = {\n        values: createSubject(),\n        array: createSubject(),\n        state: createSubject(),\n    };\n    const validationModeBeforeSubmit = getValidationModes(_options.mode);\n    const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n    const shouldDisplayAllAssociatedErrors = _options.criteriaMode === VALIDATION_MODE.all;\n    const debounce = (callback) => (wait) => {\n        clearTimeout(timer);\n        timer = setTimeout(callback, wait);\n    };\n    const _updateValid = async (shouldUpdateValid) => {\n        if (_proxyFormState.isValid || shouldUpdateValid) {\n            const isValid = _options.resolver\n                ? isEmptyObject((await _executeSchema()).errors)\n                : await executeBuiltInValidation(_fields, true);\n            if (isValid !== _formState.isValid) {\n                _subjects.state.next({\n                    isValid,\n                });\n            }\n        }\n    };\n    const _updateIsValidating = (names, isValidating) => {\n        if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {\n            (names || Array.from(_names.mount)).forEach((name) => {\n                if (name) {\n                    isValidating\n                        ? set(_formState.validatingFields, name, isValidating)\n                        : unset(_formState.validatingFields, name);\n                }\n            });\n            _subjects.state.next({\n                validatingFields: _formState.validatingFields,\n                isValidating: !isEmptyObject(_formState.validatingFields),\n            });\n        }\n    };\n    const _updateFieldArray = (name, values = [], method, args, shouldSetValues = true, shouldUpdateFieldsAndState = true) => {\n        if (args && method) {\n            _state.action = true;\n            if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n                const fieldValues = method(get(_fields, name), args.argA, args.argB);\n                shouldSetValues && set(_fields, name, fieldValues);\n            }\n            if (shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.errors, name))) {\n                const errors = method(get(_formState.errors, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.errors, name, errors);\n                unsetEmptyArray(_formState.errors, name);\n            }\n            if (_proxyFormState.touchedFields &&\n                shouldUpdateFieldsAndState &&\n                Array.isArray(get(_formState.touchedFields, name))) {\n                const touchedFields = method(get(_formState.touchedFields, name), args.argA, args.argB);\n                shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n            }\n            if (_proxyFormState.dirtyFields) {\n                _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n            }\n            _subjects.state.next({\n                name,\n                isDirty: _getDirty(name, values),\n                dirtyFields: _formState.dirtyFields,\n                errors: _formState.errors,\n                isValid: _formState.isValid,\n            });\n        }\n        else {\n            set(_formValues, name, values);\n        }\n    };\n    const updateErrors = (name, error) => {\n        set(_formState.errors, name, error);\n        _subjects.state.next({\n            errors: _formState.errors,\n        });\n    };\n    const _setErrors = (errors) => {\n        _formState.errors = errors;\n        _subjects.state.next({\n            errors: _formState.errors,\n            isValid: false,\n        });\n    };\n    const updateValidAndValue = (name, shouldSkipSetValueAs, value, ref) => {\n        const field = get(_fields, name);\n        if (field) {\n            const defaultValue = get(_formValues, name, isUndefined(value) ? get(_defaultValues, name) : value);\n            isUndefined(defaultValue) ||\n                (ref && ref.defaultChecked) ||\n                shouldSkipSetValueAs\n                ? set(_formValues, name, shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f))\n                : setFieldValue(name, defaultValue);\n            _state.mount && _updateValid();\n        }\n    };\n    const updateTouchAndDirty = (name, fieldValue, isBlurEvent, shouldDirty, shouldRender) => {\n        let shouldUpdateField = false;\n        let isPreviousDirty = false;\n        const output = {\n            name,\n        };\n        const disabledField = !!(get(_fields, name) &&\n            get(_fields, name)._f &&\n            get(_fields, name)._f.disabled);\n        if (!isBlurEvent || shouldDirty) {\n            if (_proxyFormState.isDirty) {\n                isPreviousDirty = _formState.isDirty;\n                _formState.isDirty = output.isDirty = _getDirty();\n                shouldUpdateField = isPreviousDirty !== output.isDirty;\n            }\n            const isCurrentFieldPristine = disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n            isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n            isCurrentFieldPristine || disabledField\n                ? unset(_formState.dirtyFields, name)\n                : set(_formState.dirtyFields, name, true);\n            output.dirtyFields = _formState.dirtyFields;\n            shouldUpdateField =\n                shouldUpdateField ||\n                    (_proxyFormState.dirtyFields &&\n                        isPreviousDirty !== !isCurrentFieldPristine);\n        }\n        if (isBlurEvent) {\n            const isPreviousFieldTouched = get(_formState.touchedFields, name);\n            if (!isPreviousFieldTouched) {\n                set(_formState.touchedFields, name, isBlurEvent);\n                output.touchedFields = _formState.touchedFields;\n                shouldUpdateField =\n                    shouldUpdateField ||\n                        (_proxyFormState.touchedFields &&\n                            isPreviousFieldTouched !== isBlurEvent);\n            }\n        }\n        shouldUpdateField && shouldRender && _subjects.state.next(output);\n        return shouldUpdateField ? output : {};\n    };\n    const shouldRenderByError = (name, isValid, error, fieldState) => {\n        const previousFieldError = get(_formState.errors, name);\n        const shouldUpdateValid = _proxyFormState.isValid &&\n            isBoolean(isValid) &&\n            _formState.isValid !== isValid;\n        if (props.delayError && error) {\n            delayErrorCallback = debounce(() => updateErrors(name, error));\n            delayErrorCallback(props.delayError);\n        }\n        else {\n            clearTimeout(timer);\n            delayErrorCallback = null;\n            error\n                ? set(_formState.errors, name, error)\n                : unset(_formState.errors, name);\n        }\n        if ((error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n            !isEmptyObject(fieldState) ||\n            shouldUpdateValid) {\n            const updatedFormState = {\n                ...fieldState,\n                ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n                errors: _formState.errors,\n                name,\n            };\n            _formState = {\n                ..._formState,\n                ...updatedFormState,\n            };\n            _subjects.state.next(updatedFormState);\n        }\n    };\n    const _executeSchema = async (name) => {\n        _updateIsValidating(name, true);\n        const result = await _options.resolver(_formValues, _options.context, getResolverOptions(name || _names.mount, _fields, _options.criteriaMode, _options.shouldUseNativeValidation));\n        _updateIsValidating(name);\n        return result;\n    };\n    const executeSchemaAndUpdateState = async (names) => {\n        const { errors } = await _executeSchema(names);\n        if (names) {\n            for (const name of names) {\n                const error = get(errors, name);\n                error\n                    ? set(_formState.errors, name, error)\n                    : unset(_formState.errors, name);\n            }\n        }\n        else {\n            _formState.errors = errors;\n        }\n        return errors;\n    };\n    const executeBuiltInValidation = async (fields, shouldOnlyCheckValid, context = {\n        valid: true,\n    }) => {\n        for (const name in fields) {\n            const field = fields[name];\n            if (field) {\n                const { _f, ...fieldValue } = field;\n                if (_f) {\n                    const isFieldArrayRoot = _names.array.has(_f.name);\n                    _updateIsValidating([name], true);\n                    const fieldError = await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation && !shouldOnlyCheckValid, isFieldArrayRoot);\n                    _updateIsValidating([name]);\n                    if (fieldError[_f.name]) {\n                        context.valid = false;\n                        if (shouldOnlyCheckValid) {\n                            break;\n                        }\n                    }\n                    !shouldOnlyCheckValid &&\n                        (get(fieldError, _f.name)\n                            ? isFieldArrayRoot\n                                ? updateFieldArrayRootError(_formState.errors, fieldError, _f.name)\n                                : set(_formState.errors, _f.name, fieldError[_f.name])\n                            : unset(_formState.errors, _f.name));\n                }\n                fieldValue &&\n                    (await executeBuiltInValidation(fieldValue, shouldOnlyCheckValid, context));\n            }\n        }\n        return context.valid;\n    };\n    const _removeUnmounted = () => {\n        for (const name of _names.unMount) {\n            const field = get(_fields, name);\n            field &&\n                (field._f.refs\n                    ? field._f.refs.every((ref) => !live(ref))\n                    : !live(field._f.ref)) &&\n                unregister(name);\n        }\n        _names.unMount = new Set();\n    };\n    const _getDirty = (name, data) => (name && data && set(_formValues, name, data),\n        !deepEqual(getValues(), _defaultValues));\n    const _getWatch = (names, defaultValue, isGlobal) => generateWatchOutput(names, _names, {\n        ...(_state.mount\n            ? _formValues\n            : isUndefined(defaultValue)\n                ? _defaultValues\n                : isString(names)\n                    ? { [names]: defaultValue }\n                    : defaultValue),\n    }, isGlobal, defaultValue);\n    const _getFieldArray = (name) => compact(get(_state.mount ? _formValues : _defaultValues, name, props.shouldUnregister ? get(_defaultValues, name, []) : []));\n    const setFieldValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        let fieldValue = value;\n        if (field) {\n            const fieldReference = field._f;\n            if (fieldReference) {\n                !fieldReference.disabled &&\n                    set(_formValues, name, getFieldValueAs(value, fieldReference));\n                fieldValue =\n                    isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n                        ? ''\n                        : value;\n                if (isMultipleSelect(fieldReference.ref)) {\n                    [...fieldReference.ref.options].forEach((optionRef) => (optionRef.selected = fieldValue.includes(optionRef.value)));\n                }\n                else if (fieldReference.refs) {\n                    if (isCheckBoxInput(fieldReference.ref)) {\n                        fieldReference.refs.length > 1\n                            ? fieldReference.refs.forEach((checkboxRef) => (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                                (checkboxRef.checked = Array.isArray(fieldValue)\n                                    ? !!fieldValue.find((data) => data === checkboxRef.value)\n                                    : fieldValue === checkboxRef.value))\n                            : fieldReference.refs[0] &&\n                                (fieldReference.refs[0].checked = !!fieldValue);\n                    }\n                    else {\n                        fieldReference.refs.forEach((radioRef) => (radioRef.checked = radioRef.value === fieldValue));\n                    }\n                }\n                else if (isFileInput(fieldReference.ref)) {\n                    fieldReference.ref.value = '';\n                }\n                else {\n                    fieldReference.ref.value = fieldValue;\n                    if (!fieldReference.ref.type) {\n                        _subjects.values.next({\n                            name,\n                            values: { ..._formValues },\n                        });\n                    }\n                }\n            }\n        }\n        (options.shouldDirty || options.shouldTouch) &&\n            updateTouchAndDirty(name, fieldValue, options.shouldTouch, options.shouldDirty, true);\n        options.shouldValidate && trigger(name);\n    };\n    const setValues = (name, value, options) => {\n        for (const fieldKey in value) {\n            const fieldValue = value[fieldKey];\n            const fieldName = `${name}.${fieldKey}`;\n            const field = get(_fields, fieldName);\n            (_names.array.has(name) ||\n                !isPrimitive(fieldValue) ||\n                (field && !field._f)) &&\n                !isDateObject(fieldValue)\n                ? setValues(fieldName, fieldValue, options)\n                : setFieldValue(fieldName, fieldValue, options);\n        }\n    };\n    const setValue = (name, value, options = {}) => {\n        const field = get(_fields, name);\n        const isFieldArray = _names.array.has(name);\n        const cloneValue = cloneObject(value);\n        set(_formValues, name, cloneValue);\n        if (isFieldArray) {\n            _subjects.array.next({\n                name,\n                values: { ..._formValues },\n            });\n            if ((_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n                options.shouldDirty) {\n                _subjects.state.next({\n                    name,\n                    dirtyFields: getDirtyFields(_defaultValues, _formValues),\n                    isDirty: _getDirty(name, cloneValue),\n                });\n            }\n        }\n        else {\n            field && !field._f && !isNullOrUndefined(cloneValue)\n                ? setValues(name, cloneValue, options)\n                : setFieldValue(name, cloneValue, options);\n        }\n        isWatched(name, _names) && _subjects.state.next({ ..._formState });\n        _subjects.values.next({\n            name: _state.mount ? name : undefined,\n            values: { ..._formValues },\n        });\n    };\n    const onChange = async (event) => {\n        _state.mount = true;\n        const target = event.target;\n        let name = target.name;\n        let isFieldValueUpdated = true;\n        const field = get(_fields, name);\n        const getCurrentFieldValue = () => target.type ? getFieldValue(field._f) : getEventValue(event);\n        const _updateIsFieldValueUpdated = (fieldValue) => {\n            isFieldValueUpdated =\n                Number.isNaN(fieldValue) ||\n                    fieldValue === get(_formValues, name, fieldValue);\n        };\n        if (field) {\n            let error;\n            let isValid;\n            const fieldValue = getCurrentFieldValue();\n            const isBlurEvent = event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n            const shouldSkipValidation = (!hasValidation(field._f) &&\n                !_options.resolver &&\n                !get(_formState.errors, name) &&\n                !field._f.deps) ||\n                skipValidation(isBlurEvent, get(_formState.touchedFields, name), _formState.isSubmitted, validationModeAfterSubmit, validationModeBeforeSubmit);\n            const watched = isWatched(name, _names, isBlurEvent);\n            set(_formValues, name, fieldValue);\n            if (isBlurEvent) {\n                field._f.onBlur && field._f.onBlur(event);\n                delayErrorCallback && delayErrorCallback(0);\n            }\n            else if (field._f.onChange) {\n                field._f.onChange(event);\n            }\n            const fieldState = updateTouchAndDirty(name, fieldValue, isBlurEvent, false);\n            const shouldRender = !isEmptyObject(fieldState) || watched;\n            !isBlurEvent &&\n                _subjects.values.next({\n                    name,\n                    type: event.type,\n                    values: { ..._formValues },\n                });\n            if (shouldSkipValidation) {\n                _proxyFormState.isValid && _updateValid();\n                return (shouldRender &&\n                    _subjects.state.next({ name, ...(watched ? {} : fieldState) }));\n            }\n            !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n            if (_options.resolver) {\n                const { errors } = await _executeSchema([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    const previousErrorLookupResult = schemaErrorLookup(_formState.errors, _fields, name);\n                    const errorLookupResult = schemaErrorLookup(errors, _fields, previousErrorLookupResult.name || name);\n                    error = errorLookupResult.error;\n                    name = errorLookupResult.name;\n                    isValid = isEmptyObject(errors);\n                }\n            }\n            else {\n                _updateIsValidating([name], true);\n                error = (await validateField(field, _formValues, shouldDisplayAllAssociatedErrors, _options.shouldUseNativeValidation))[name];\n                _updateIsValidating([name]);\n                _updateIsFieldValueUpdated(fieldValue);\n                if (isFieldValueUpdated) {\n                    if (error) {\n                        isValid = false;\n                    }\n                    else if (_proxyFormState.isValid) {\n                        isValid = await executeBuiltInValidation(_fields, true);\n                    }\n                }\n            }\n            if (isFieldValueUpdated) {\n                field._f.deps &&\n                    trigger(field._f.deps);\n                shouldRenderByError(name, isValid, error, fieldState);\n            }\n        }\n    };\n    const _focusInput = (ref, key) => {\n        if (get(_formState.errors, key) && ref.focus) {\n            ref.focus();\n            return 1;\n        }\n        return;\n    };\n    const trigger = async (name, options = {}) => {\n        let isValid;\n        let validationResult;\n        const fieldNames = convertToArrayPayload(name);\n        if (_options.resolver) {\n            const errors = await executeSchemaAndUpdateState(isUndefined(name) ? name : fieldNames);\n            isValid = isEmptyObject(errors);\n            validationResult = name\n                ? !fieldNames.some((name) => get(errors, name))\n                : isValid;\n        }\n        else if (name) {\n            validationResult = (await Promise.all(fieldNames.map(async (fieldName) => {\n                const field = get(_fields, fieldName);\n                return await executeBuiltInValidation(field && field._f ? { [fieldName]: field } : field);\n            }))).every(Boolean);\n            !(!validationResult && !_formState.isValid) && _updateValid();\n        }\n        else {\n            validationResult = isValid = await executeBuiltInValidation(_fields);\n        }\n        _subjects.state.next({\n            ...(!isString(name) ||\n                (_proxyFormState.isValid && isValid !== _formState.isValid)\n                ? {}\n                : { name }),\n            ...(_options.resolver || !name ? { isValid } : {}),\n            errors: _formState.errors,\n        });\n        options.shouldFocus &&\n            !validationResult &&\n            iterateFieldsByAction(_fields, _focusInput, name ? fieldNames : _names.mount);\n        return validationResult;\n    };\n    const getValues = (fieldNames) => {\n        const values = {\n            ...(_state.mount ? _formValues : _defaultValues),\n        };\n        return isUndefined(fieldNames)\n            ? values\n            : isString(fieldNames)\n                ? get(values, fieldNames)\n                : fieldNames.map((name) => get(values, name));\n    };\n    const getFieldState = (name, formState) => ({\n        invalid: !!get((formState || _formState).errors, name),\n        isDirty: !!get((formState || _formState).dirtyFields, name),\n        error: get((formState || _formState).errors, name),\n        isValidating: !!get(_formState.validatingFields, name),\n        isTouched: !!get((formState || _formState).touchedFields, name),\n    });\n    const clearErrors = (name) => {\n        name &&\n            convertToArrayPayload(name).forEach((inputName) => unset(_formState.errors, inputName));\n        _subjects.state.next({\n            errors: name ? _formState.errors : {},\n        });\n    };\n    const setError = (name, error, options) => {\n        const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n        const currentError = get(_formState.errors, name) || {};\n        // Don't override existing error messages elsewhere in the object tree.\n        const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n        set(_formState.errors, name, {\n            ...restOfErrorTree,\n            ...error,\n            ref,\n        });\n        _subjects.state.next({\n            name,\n            errors: _formState.errors,\n            isValid: false,\n        });\n        options && options.shouldFocus && ref && ref.focus && ref.focus();\n    };\n    const watch = (name, defaultValue) => isFunction(name)\n        ? _subjects.values.subscribe({\n            next: (payload) => name(_getWatch(undefined, defaultValue), payload),\n        })\n        : _getWatch(name, defaultValue, true);\n    const unregister = (name, options = {}) => {\n        for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n            _names.mount.delete(fieldName);\n            _names.array.delete(fieldName);\n            if (!options.keepValue) {\n                unset(_fields, fieldName);\n                unset(_formValues, fieldName);\n            }\n            !options.keepError && unset(_formState.errors, fieldName);\n            !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n            !options.keepTouched && unset(_formState.touchedFields, fieldName);\n            !options.keepIsValidating &&\n                unset(_formState.validatingFields, fieldName);\n            !_options.shouldUnregister &&\n                !options.keepDefaultValue &&\n                unset(_defaultValues, fieldName);\n        }\n        _subjects.values.next({\n            values: { ..._formValues },\n        });\n        _subjects.state.next({\n            ..._formState,\n            ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n        });\n        !options.keepIsValid && _updateValid();\n    };\n    const _updateDisabledField = ({ disabled, name, field, fields, value, }) => {\n        if ((isBoolean(disabled) && _state.mount) || !!disabled) {\n            const inputValue = disabled\n                ? undefined\n                : isUndefined(value)\n                    ? getFieldValue(field ? field._f : get(fields, name)._f)\n                    : value;\n            set(_formValues, name, inputValue);\n            updateTouchAndDirty(name, inputValue, false, false, true);\n        }\n    };\n    const register = (name, options = {}) => {\n        let field = get(_fields, name);\n        const disabledIsDefined = isBoolean(options.disabled);\n        set(_fields, name, {\n            ...(field || {}),\n            _f: {\n                ...(field && field._f ? field._f : { ref: { name } }),\n                name,\n                mount: true,\n                ...options,\n            },\n        });\n        _names.mount.add(name);\n        if (field) {\n            _updateDisabledField({\n                field,\n                disabled: options.disabled,\n                name,\n                value: options.value,\n            });\n        }\n        else {\n            updateValidAndValue(name, true, options.value);\n        }\n        return {\n            ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n            ...(_options.progressive\n                ? {\n                    required: !!options.required,\n                    min: getRuleValue(options.min),\n                    max: getRuleValue(options.max),\n                    minLength: getRuleValue(options.minLength),\n                    maxLength: getRuleValue(options.maxLength),\n                    pattern: getRuleValue(options.pattern),\n                }\n                : {}),\n            name,\n            onChange,\n            onBlur: onChange,\n            ref: (ref) => {\n                if (ref) {\n                    register(name, options);\n                    field = get(_fields, name);\n                    const fieldRef = isUndefined(ref.value)\n                        ? ref.querySelectorAll\n                            ? ref.querySelectorAll('input,select,textarea')[0] || ref\n                            : ref\n                        : ref;\n                    const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n                    const refs = field._f.refs || [];\n                    if (radioOrCheckbox\n                        ? refs.find((option) => option === fieldRef)\n                        : fieldRef === field._f.ref) {\n                        return;\n                    }\n                    set(_fields, name, {\n                        _f: {\n                            ...field._f,\n                            ...(radioOrCheckbox\n                                ? {\n                                    refs: [\n                                        ...refs.filter(live),\n                                        fieldRef,\n                                        ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                                    ],\n                                    ref: { type: fieldRef.type, name },\n                                }\n                                : { ref: fieldRef }),\n                        },\n                    });\n                    updateValidAndValue(name, false, undefined, fieldRef);\n                }\n                else {\n                    field = get(_fields, name, {});\n                    if (field._f) {\n                        field._f.mount = false;\n                    }\n                    (_options.shouldUnregister || options.shouldUnregister) &&\n                        !(isNameInFieldArray(_names.array, name) && _state.action) &&\n                        _names.unMount.add(name);\n                }\n            },\n        };\n    };\n    const _focusError = () => _options.shouldFocusError &&\n        iterateFieldsByAction(_fields, _focusInput, _names.mount);\n    const _disableForm = (disabled) => {\n        if (isBoolean(disabled)) {\n            _subjects.state.next({ disabled });\n            iterateFieldsByAction(_fields, (ref, name) => {\n                const currentField = get(_fields, name);\n                if (currentField) {\n                    ref.disabled = currentField._f.disabled || disabled;\n                    if (Array.isArray(currentField._f.refs)) {\n                        currentField._f.refs.forEach((inputRef) => {\n                            inputRef.disabled = currentField._f.disabled || disabled;\n                        });\n                    }\n                }\n            }, 0, false);\n        }\n    };\n    const handleSubmit = (onValid, onInvalid) => async (e) => {\n        let onValidError = undefined;\n        if (e) {\n            e.preventDefault && e.preventDefault();\n            e.persist && e.persist();\n        }\n        let fieldValues = cloneObject(_formValues);\n        _subjects.state.next({\n            isSubmitting: true,\n        });\n        if (_options.resolver) {\n            const { errors, values } = await _executeSchema();\n            _formState.errors = errors;\n            fieldValues = values;\n        }\n        else {\n            await executeBuiltInValidation(_fields);\n        }\n        unset(_formState.errors, 'root');\n        if (isEmptyObject(_formState.errors)) {\n            _subjects.state.next({\n                errors: {},\n            });\n            try {\n                await onValid(fieldValues, e);\n            }\n            catch (error) {\n                onValidError = error;\n            }\n        }\n        else {\n            if (onInvalid) {\n                await onInvalid({ ..._formState.errors }, e);\n            }\n            _focusError();\n            setTimeout(_focusError);\n        }\n        _subjects.state.next({\n            isSubmitted: true,\n            isSubmitting: false,\n            isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n            submitCount: _formState.submitCount + 1,\n            errors: _formState.errors,\n        });\n        if (onValidError) {\n            throw onValidError;\n        }\n    };\n    const resetField = (name, options = {}) => {\n        if (get(_fields, name)) {\n            if (isUndefined(options.defaultValue)) {\n                setValue(name, cloneObject(get(_defaultValues, name)));\n            }\n            else {\n                setValue(name, options.defaultValue);\n                set(_defaultValues, name, cloneObject(options.defaultValue));\n            }\n            if (!options.keepTouched) {\n                unset(_formState.touchedFields, name);\n            }\n            if (!options.keepDirty) {\n                unset(_formState.dirtyFields, name);\n                _formState.isDirty = options.defaultValue\n                    ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n                    : _getDirty();\n            }\n            if (!options.keepError) {\n                unset(_formState.errors, name);\n                _proxyFormState.isValid && _updateValid();\n            }\n            _subjects.state.next({ ..._formState });\n        }\n    };\n    const _reset = (formValues, keepStateOptions = {}) => {\n        const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n        const cloneUpdatedValues = cloneObject(updatedValues);\n        const isEmptyResetValues = isEmptyObject(formValues);\n        const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n        if (!keepStateOptions.keepDefaultValues) {\n            _defaultValues = updatedValues;\n        }\n        if (!keepStateOptions.keepValues) {\n            if (keepStateOptions.keepDirtyValues) {\n                for (const fieldName of _names.mount) {\n                    get(_formState.dirtyFields, fieldName)\n                        ? set(values, fieldName, get(_formValues, fieldName))\n                        : setValue(fieldName, get(values, fieldName));\n                }\n            }\n            else {\n                if (isWeb && isUndefined(formValues)) {\n                    for (const name of _names.mount) {\n                        const field = get(_fields, name);\n                        if (field && field._f) {\n                            const fieldReference = Array.isArray(field._f.refs)\n                                ? field._f.refs[0]\n                                : field._f.ref;\n                            if (isHTMLElement(fieldReference)) {\n                                const form = fieldReference.closest('form');\n                                if (form) {\n                                    form.reset();\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n                _fields = {};\n            }\n            _formValues = props.shouldUnregister\n                ? keepStateOptions.keepDefaultValues\n                    ? cloneObject(_defaultValues)\n                    : {}\n                : cloneObject(values);\n            _subjects.array.next({\n                values: { ...values },\n            });\n            _subjects.values.next({\n                values: { ...values },\n            });\n        }\n        _names = {\n            mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n            unMount: new Set(),\n            array: new Set(),\n            watch: new Set(),\n            watchAll: false,\n            focus: '',\n        };\n        _state.mount =\n            !_proxyFormState.isValid ||\n                !!keepStateOptions.keepIsValid ||\n                !!keepStateOptions.keepDirtyValues;\n        _state.watch = !!props.shouldUnregister;\n        _subjects.state.next({\n            submitCount: keepStateOptions.keepSubmitCount\n                ? _formState.submitCount\n                : 0,\n            isDirty: isEmptyResetValues\n                ? false\n                : keepStateOptions.keepDirty\n                    ? _formState.isDirty\n                    : !!(keepStateOptions.keepDefaultValues &&\n                        !deepEqual(formValues, _defaultValues)),\n            isSubmitted: keepStateOptions.keepIsSubmitted\n                ? _formState.isSubmitted\n                : false,\n            dirtyFields: isEmptyResetValues\n                ? {}\n                : keepStateOptions.keepDirtyValues\n                    ? keepStateOptions.keepDefaultValues && _formValues\n                        ? getDirtyFields(_defaultValues, _formValues)\n                        : _formState.dirtyFields\n                    : keepStateOptions.keepDefaultValues && formValues\n                        ? getDirtyFields(_defaultValues, formValues)\n                        : keepStateOptions.keepDirty\n                            ? _formState.dirtyFields\n                            : {},\n            touchedFields: keepStateOptions.keepTouched\n                ? _formState.touchedFields\n                : {},\n            errors: keepStateOptions.keepErrors ? _formState.errors : {},\n            isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n                ? _formState.isSubmitSuccessful\n                : false,\n            isSubmitting: false,\n        });\n    };\n    const reset = (formValues, keepStateOptions) => _reset(isFunction(formValues)\n        ? formValues(_formValues)\n        : formValues, keepStateOptions);\n    const setFocus = (name, options = {}) => {\n        const field = get(_fields, name);\n        const fieldReference = field && field._f;\n        if (fieldReference) {\n            const fieldRef = fieldReference.refs\n                ? fieldReference.refs[0]\n                : fieldReference.ref;\n            if (fieldRef.focus) {\n                fieldRef.focus();\n                options.shouldSelect && fieldRef.select();\n            }\n        }\n    };\n    const _updateFormState = (updatedFormState) => {\n        _formState = {\n            ..._formState,\n            ...updatedFormState,\n        };\n    };\n    const _resetDefaultValues = () => isFunction(_options.defaultValues) &&\n        _options.defaultValues().then((values) => {\n            reset(values, _options.resetOptions);\n            _subjects.state.next({\n                isLoading: false,\n            });\n        });\n    return {\n        control: {\n            register,\n            unregister,\n            getFieldState,\n            handleSubmit,\n            setError,\n            _executeSchema,\n            _getWatch,\n            _getDirty,\n            _updateValid,\n            _removeUnmounted,\n            _updateFieldArray,\n            _updateDisabledField,\n            _getFieldArray,\n            _reset,\n            _resetDefaultValues,\n            _updateFormState,\n            _disableForm,\n            _subjects,\n            _proxyFormState,\n            _setErrors,\n            get _fields() {\n                return _fields;\n            },\n            get _formValues() {\n                return _formValues;\n            },\n            get _state() {\n                return _state;\n            },\n            set _state(value) {\n                _state = value;\n            },\n            get _defaultValues() {\n                return _defaultValues;\n            },\n            get _names() {\n                return _names;\n            },\n            set _names(value) {\n                _names = value;\n            },\n            get _formState() {\n                return _formState;\n            },\n            set _formState(value) {\n                _formState = value;\n            },\n            get _options() {\n                return _options;\n            },\n            set _options(value) {\n                _options = {\n                    ..._options,\n                    ...value,\n                };\n            },\n        },\n        trigger,\n        register,\n        handleSubmit,\n        watch,\n        setValue,\n        getValues,\n        reset,\n        resetField,\n        clearErrors,\n        unregister,\n        setError,\n        setFocus,\n        getFieldState,\n    };\n}\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useForm(props = {}) {\n    const _formControl = React.useRef();\n    const _values = React.useRef();\n    const [formState, updateFormState] = React.useState({\n        isDirty: false,\n        isValidating: false,\n        isLoading: isFunction(props.defaultValues),\n        isSubmitted: false,\n        isSubmitting: false,\n        isSubmitSuccessful: false,\n        isValid: false,\n        submitCount: 0,\n        dirtyFields: {},\n        touchedFields: {},\n        validatingFields: {},\n        errors: props.errors || {},\n        disabled: props.disabled || false,\n        defaultValues: isFunction(props.defaultValues)\n            ? undefined\n            : props.defaultValues,\n    });\n    if (!_formControl.current) {\n        _formControl.current = {\n            ...createFormControl(props),\n            formState,\n        };\n    }\n    const control = _formControl.current.control;\n    control._options = props;\n    useSubscribe({\n        subject: control._subjects.state,\n        next: (value) => {\n            if (shouldRenderFormState(value, control._proxyFormState, control._updateFormState, true)) {\n                updateFormState({ ...control._formState });\n            }\n        },\n    });\n    React.useEffect(() => control._disableForm(props.disabled), [control, props.disabled]);\n    React.useEffect(() => {\n        if (control._proxyFormState.isDirty) {\n            const isDirty = control._getDirty();\n            if (isDirty !== formState.isDirty) {\n                control._subjects.state.next({\n                    isDirty,\n                });\n            }\n        }\n    }, [control, formState.isDirty]);\n    React.useEffect(() => {\n        if (props.values && !deepEqual(props.values, _values.current)) {\n            control._reset(props.values, control._options.resetOptions);\n            _values.current = props.values;\n            updateFormState((state) => ({ ...state }));\n        }\n        else {\n            control._resetDefaultValues();\n        }\n    }, [props.values, control]);\n    React.useEffect(() => {\n        if (props.errors) {\n            control._setErrors(props.errors);\n        }\n    }, [props.errors, control]);\n    React.useEffect(() => {\n        if (!control._state.mount) {\n            control._updateValid();\n            control._state.mount = true;\n        }\n        if (control._state.watch) {\n            control._state.watch = false;\n            control._subjects.state.next({ ...control._formState });\n        }\n        control._removeUnmounted();\n    });\n    React.useEffect(() => {\n        props.shouldUnregister &&\n            control._subjects.values.next({\n                values: control._getWatch(),\n            });\n    }, [props.shouldUnregister, control]);\n    _formControl.current.formState = getProxyFormState(formState, control);\n    return _formControl.current;\n}\n\nexport { Controller, Form, FormProvider, appendErrors, get, set, useController, useFieldArray, useForm, useFormContext, useFormState, useWatch };\n//# sourceMappingURL=index.esm.mjs.map\n","export const USER_LOGIN_FORM = {\n\tREQUIRED_USER_NAME: 'Please enter your email/username',\n\tREQUIRED_PASSWORD: 'Please enter your password',\n\tTITLE: 'Welcome',\n\tMESSAGE: 'Please sign in to access your account',\n\tINVALID_USER:\n\t\t'We couldn’t find an account with the credentials you entered. Please try again or click Forgot Password to reset your password.',\n\tERROR_MESSAGE: 'An error occurred during sign-in. Please try again later.',\n};","import React from 'react';\nimport './activationCmp.css';\n\nconst ActivationFooter = ({ privacyPolicyLink, termsOfUseLink }) => (\n  <div className=\"footer\">\n    <div className=\"link-container\">\n      <a className=\"styled-link\" href={privacyPolicyLink || 'privacy-policy-details'}>\n        Privacy Policy\n      </a>\n    </div>\n    <div className=\"link-container\">\n      <a className=\"styled-link\" target=\"_blank\" href={termsOfUseLink || 'terms-and-conditions-details'}>\n        Terms of Use\n      </a>\n    </div>\n  </div>\n);\n\nexport default ActivationFooter;\n","import React from 'react';\nimport './activationCmp.css';\n\nconst ActivationHeader = ({ title, subtitle, siteLogo }) => (\n  <div className=\"header\">\n    <div className=\"image-wrapper\">\n      <div className=\"picture\">\n        {/* <Fcfdlogo width=\"253\" height=\"50\" /> */}\n       {siteLogo}\n      </div>\n    </div>\n    <div className=\"head\">\n      <div className=\"title\">{title}</div>\n      {subtitle && (\n        <div className=\"subtitle\" dangerouslySetInnerHTML={{ __html: subtitle }} />\n      )}\n    </div>\n  </div>\n);\n\nexport default ActivationHeader;\n","import React, { useEffect, useState } from \"react\";\nimport { useForm, Controller } from \"react-hook-form\";\nimport FloatingInput from \"../../components/FloatingInput/FloatingInput\";\nimport {Button} from '../../components/Button'\n// import Link from 'next/link';\n\n// import ActivationHeader from \"./component/ActivationHeader\";\nimport { USER_LOGIN_FORM } from \"./constants\";\nimport { ActivationFooter, ActivationHeader } from \"./components\";\n// import {}\n// \tuserSignIn,\n// \tredirectToMarketplace,\n// } from '../../../global/services/userService';\nimport \"./login.css\";\n\n/**\n * Represents login Form.\n */\nconst LoginScreen = ({ siteLogo }) => {\n  const {\n    handleSubmit,\n    control,\n    formState: { errors },\n    getValues,\n    watch,\n    setError,\n  } = useForm({\n    mode: \"onSubmit\",\n  });\n\n  const [loading, setLoading] = useState(false);\n\n  watch();\n\n  const mapValues = () => {\n    const values = getValues();\n\n    return {\n      username: values?.username,\n      password: values?.password,\n      idpType: \"COGNITO\",\n      application: \"marketplace\",\n    };\n  };\n\n  const onSubmit = async () => {\n    setLoading(true);\n    // try {\n    // \tconst { authGrantCode, response } = await userSignIn(mapValues());\n\n    // \tif (authGrantCode) {\n    // \t\tredirectToMarketplace(authGrantCode);\n    // \t} else if (response.status === 401) {\n    // \t\tsetError('password', {\n    // \t\t\tmessage: USER_LOGIN_FORM.INVALID_USER,\n    // \t\t});\n    // \t} else {\n    // \t\tsetError('password', {\n    // \t\t\tmessage: USER_LOGIN_FORM.ERROR_MESSAGE,\n    // \t\t});\n    // \t}\n    // \tsetLoading(false);\n    // } catch (e) {\n    // \tsetError('password', {\n    // \t\tmessage: USER_LOGIN_FORM.ERROR_MESSAGE,\n    // \t});\n    // \tsetLoading(false);\n    // }\n  };\n\n  /**\n   * Returns true if all required fields are entered else returns false.\n   */\n  const hasRequiredFields = () => {\n    const { username, password } = getValues();\n\n    return !!username && !!password;\n  };\n\n  useEffect(() => {\n    const handleKeyPress = (event) => {\n      if (event.key === \"Enter\") {\n        handleSubmit(onSubmit)();\n      }\n    };\n\n    document.addEventListener(\"keydown\", handleKeyPress);\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyPress);\n    };\n  }, []);\n\n  return (\n    <div className=\"card\">\n      <ActivationHeader\n        title={USER_LOGIN_FORM.TITLE}\n        subtitle={USER_LOGIN_FORM.MESSAGE}\n        siteLogo={siteLogo}\n      />\n\n      <form noValidate>\n        <div className=\"element-wrapper\">\n          <Controller\n            name=\"username\"\n            rules={{\n              required: {\n                value: true,\n                message: USER_LOGIN_FORM.REQUIRED_USER_NAME,\n              },\n            }}\n            control={control}\n            render={({ field }) => {\n              return (\n                <FloatingInput\n                  aria-invalid={errors?.username ? \"true\" : \"false\"}\n                  errors={errors.username}\n                  type=\"text\"\n                  errorMsg={errors.username?.message}\n                  label=\"Username\"\n                  variant=\"vehicleDetails\"\n                  {...field}\n                />\n              );\n            }}\n          />\n        </div>\n\n        <div className=\"element-wrapper\">\n          <Controller\n            name=\"password\"\n            rules={{\n              required: {\n                value: true,\n                message: USER_LOGIN_FORM.REQUIRED_PASSWORD,\n              },\n            }}\n            control={control}\n            render={({ field }) => {\n              return (\n                <FloatingInput\n                  aria-invalid={errors.password ? \"true\" : \"false\"}\n                  errors={errors.password}\n                  type=\"password\"\n                  errorMsg={errors.password?.message}\n                  label=\"Password\"\n                  variant=\"vehicleDetails\"\n                  {...field}\n                />\n              );\n            }}\n          />\n        </div>\n      </form>\n\n      <div className=\"forgot-wrapper\">\n        <a href=\"/forgot-password\">Forgot password?</a>\n      </div>\n\n      <div className=\"button-wrapper\">\n        <Button appearance=\"primary\" onClick={handleSubmit(onSubmit)} className=\"login-button\">\n          {\"Continue test\"}\n        </Button>\n        {/* <button\n          type=\"button\"\n          className=\"activation-button\"\n          disabled={!hasRequiredFields()}\n          onClick={handleSubmit(onSubmit)}\n        >\n          Continue */}\n        {/* </button> */}\n      </div>\n\n      <ActivationFooter />\n    </div>\n  );\n};\n\nexport default LoginScreen;\n"],"names":["styleInject","css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","Button","forwardRef","props","className","label","_props$tag","tag","Tag","_props$loading","loading","_props$size","size","_props$appearance","appearance","onClick","outbound","visible","children","attributes","_objectWithoutProperties","_excluded","buttonClasses","styles","button","join","_jsxs","_objectSpread","displayName","CustomInput","React","_props$type","_props$placeholder","placeholder","text","_props$className","_props$errors","errors","_props$errorMsg","errorMsg","_props$label","register","filled","_props$isRequired","isRequired","_props$editable","editable","leftIcon","rightIcon","isClearable","variant","maxedWidth","endAdornment","_useState2","_slicedToArray","useState","showPassword","dataTestId","width","concat","_jsx","autoComplete","onChange","event","required","id","htmlFor","role","toString","FloatingInput","_ref","_ref$errors","_ref$label","_ref$onChange","_ref$isRequired","_ref$isClearable","_ref$variant","_ref$value","value","restProps","val","setVal","useEffect","target","convertToSentenceCase","str","sentenceCasedStr","result","replace","charAt","toUpperCase","slice","e","console","log","isCheckBoxInput","element","isDateObject","Date","isNullOrUndefined","isObjectType","isObject","Array","isArray","getEventValue","checked","isNameInFieldArray","names","name","has","substring","search","getNodeParentName","isPlainObject","tempObject","prototypeCopy","constructor","prototype","hasOwnProperty","isWeb","window","HTMLElement","cloneObject","data","copy","Set","Blob","FileList","key","compact","filter","Boolean","isUndefined","undefined","get","object","path","defaultValue","split","reduce","isBoolean","isKey","test","stringToPath","input","set","index","tempPath","length","lastIndex","newValue","objValue","isNaN","EVENTS","BLUR","FOCUS_OUT","CHANGE","VALIDATION_MODE","onBlur","onSubmit","onTouched","all","INPUT_VALIDATION_RULES","HookFormContext","createContext","useFormContext","useContext","getProxyFormState","formState","control","localProxyFormState","isRoot","defaultValues","_defaultValues","Object","defineProperty","_key","_proxyFormState","isEmptyObject","keys","shouldRenderFormState","formStateData","updateFormState","find","convertToArrayPayload","shouldSubscribeByName","signalName","exact","some","currentName","startsWith","useSubscribe","_props","useRef","current","subscription","disabled","subject","subscribe","next","unsubscribe","isString","generateWatchOutput","_names","formValues","isGlobal","watch","add","map","fieldName","watchAll","useController","methods","shouldUnregister","isArrayField","array","_name","_subjects","values","updateValue","_formValues","_getWatch","_removeUnmounted","useWatch","_formState","_mounted","_localProxyFormState","isDirty","isLoading","dirtyFields","touchedFields","validatingFields","isValidating","isValid","_updateFormState","state","_updateValid","useFormState","_registerProps","rules","_shouldUnregisterField","_options","updateMounted","field","_fields","_f","mount","_state","action","unregister","_updateDisabledField","fields","useCallback","elm","focus","select","setCustomValidity","message","reportValidity","fieldState","defineProperties","invalid","enumerable","isTouched","error","Controller","render","appendErrors","validateAllFieldCriteria","types","getValidationModes","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","isWatched","isBlurEvent","watchName","iterateFieldsByAction","fieldsNames","abortEarly","currentField","refs","updateFieldArrayRootError","fieldArrayErrors","isFileInput","isFunction","isHTMLElement","owner","ownerDocument","defaultView","isMessage","isRadioInput","isRegex","RegExp","defaultResult","validResult","getCheckboxValue","options","option","defaultReturn","getRadioValue","previous","getValidateError","every","getValueAndMessage","validationData","validateField","async","shouldUseNativeValidation","isFieldArray","maxLength","minLength","min","max","pattern","validate","valueAsNumber","inputValue","inputRef","isRadio","isCheckBox","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","exceedMin","maxOutput","minOutput","valueDate","valueAsDate","convertTimeToDate","time","toDateString","isTime","isWeek","valueNumber","maxLengthOutput","minLengthOutput","patternValue","match","validateError","validationResult","unset","paths","childObject","updatePath","baseGet","obj","isEmptyArray","createSubject","_observers","observers","observer","push","o","isPrimitive","deepEqual","object1","object2","getTime","keys1","keys2","val1","includes","val2","isMultipleSelect","live","isConnected","objectHasFunction","markFieldsDirty","isParentNodeArray","getDirtyFieldsFromDefaultValues","dirtyFieldsFromValues","getDirtyFields","getFieldValueAs","setValueAs","NaN","getFieldValue","files","selectedOptions","getResolverOptions","criteriaMode","getRuleValue","rule","source","hasValidation","schemaErrorLookup","foundError","pop","skipValidation","isSubmitted","reValidateMode","unsetEmptyArray","defaultOptions","shouldFocusError","createFormControl","delayErrorCallback","submitCount","isSubmitting","isSubmitSuccessful","unMount","timer","validationModeBeforeSubmit","validationModeAfterSubmit","shouldDisplayAllAssociatedErrors","shouldUpdateValid","resolver","_executeSchema","executeBuiltInValidation","_updateIsValidating","from","forEach","updateValidAndValue","shouldSkipSetValueAs","defaultChecked","setFieldValue","updateTouchAndDirty","fieldValue","shouldDirty","shouldRender","shouldUpdateField","isPreviousDirty","output","disabledField","_getDirty","isCurrentFieldPristine","isPreviousFieldTouched","shouldRenderByError","previousFieldError","callback","delayError","updateErrors","wait","clearTimeout","setTimeout","updatedFormState","context","shouldOnlyCheckValid","valid","isFieldArrayRoot","fieldError","getValues","fieldReference","optionRef","selected","checkboxRef","radioRef","shouldTouch","shouldValidate","trigger","setValues","fieldKey","setValue","cloneValue","isFieldValueUpdated","_updateIsFieldValueUpdated","Number","shouldSkipValidation","deps","watched","previousErrorLookupResult","errorLookupResult","_focusInput","fieldNames","executeSchemaAndUpdateState","Promise","shouldFocus","getFieldState","setError","currentError","currentRef","restOfErrorTree","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","disabledIsDefined","progressive","fieldRef","querySelectorAll","radioOrCheckbox","_focusError","handleSubmit","onValid","onInvalid","onValidError","preventDefault","persist","fieldValues","_reset","keepStateOptions","updatedValues","cloneUpdatedValues","isEmptyResetValues","keepDefaultValues","keepValues","keepDirtyValues","form","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_updateFieldArray","method","args","shouldSetValues","shouldUpdateFieldsAndState","argA","argB","_getFieldArray","_resetDefaultValues","then","resetOptions","_disableForm","_setErrors","payload","resetField","clearErrors","inputName","setFocus","shouldSelect","USER_LOGIN_FORM","ActivationFooter","privacyPolicyLink","termsOfUseLink","href","ActivationHeader","title","subtitle","siteLogo","dangerouslySetInnerHTML","__html","LoginScreen","_useForm","_formControl","_values","useForm","setLoading","_ref2","_regeneratorRuntime","mark","_callee","wrap","_context","prev","stop","apply","this","arguments","handleKeyPress","addEventListener","removeEventListener","noValidate","_ref3","_errors$username","username","_ref4","_errors$password","password"],"mappings":"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","x_google_ignoreList":[0,5]}